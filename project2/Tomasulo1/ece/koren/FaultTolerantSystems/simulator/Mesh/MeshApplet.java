/*
 * MeshApplet.java
 *
 * Created on November 1, 2003, 1:21 PM
 */

/**
 *
 * @author  kamesh
 */

import java.util.Random;
import javax.swing.Icon;

public class MeshApplet extends javax.swing.JApplet implements Runnable {
    
    /** Initializes the applet MeshApplet */
    public void init() {
        setSize(900,600);
        initComponents();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(999999);
        CThread = new Thread(this,"Compute");
        input =  0;
        stop_run = 0;
    }
    
    
    public void start(){
        CThread.start();
        jButton1.setEnabled(false);
     }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jDialog1 = new javax.swing.JDialog();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTextField3 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        jDialog1.getContentPane().setLayout(null);

        jDialog1.setTitle("Message");
        jDialog1.setResizable(false);
        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jDialog1.getContentPane().add(jButton3);
        jButton3.setBounds(70, 290, 340, 25);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jTextArea1.setLineWrap(true);
        jScrollPane1.setViewportView(jTextArea1);

        jDialog1.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 30, 330, 250);

        getContentPane().setLayout(null);

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setText("N");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 30, 15);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1);
        jButton1.setBounds(10, 230, 70, 20);

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2);
        jButton2.setBounds(10, 260, 70, 20);

        getContentPane().add(jTextField1);
        jTextField1.setBounds(50, 20, 50, 19);

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(110, 0, 2, 600);

        jLabel2.setText("R");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 50, 30, 15);

        getContentPane().add(jTextField2);
        jTextField2.setBounds(50, 50, 50, 19);

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(310, 0, 2, 600);

        jLabel3.setText("Mesh Reliability    R");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(120, 20, 170, 15);

        jProgressBar1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(120, 140, 180, 20);

        getContentPane().add(jTextField3);
        jTextField3.setBounds(120, 40, 180, 19);

        jRadioButton1.setText("4x4");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(10, 100, 50, 23);

        jRadioButton2.setText("2x4");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton2);
        jRadioButton2.setBounds(60, 100, 50, 23);

        jRadioButton3.setText("1x4");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton3);
        jRadioButton3.setBounds(10, 120, 50, 23);

        jLabel4.setText("Mesh Layout");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 80, 90, 15);

        jLabel5.setText("Simulation Progress");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(120, 120, 180, 15);

        jButton4.setText("Help");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton4);
        jButton4.setBounds(10, 320, 70, 40);

        jSlider1.setMaximum(1000000);
        jSlider1.setValue(500000);
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSlider1MouseReleased(evt);
            }
        });

        getContentPane().add(jSlider1);
        jSlider1.setBounds(0, 170, 110, 16);

        jLabel6.setText("Iterations");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 150, 90, 15);

        jLabel7.setText("Confidence Interval");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(120, 70, 170, 15);

        getContentPane().add(jTextField4);
        jTextField4.setBounds(120, 90, 180, 19);

        jButton5.setText("Stop");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton5);
        jButton5.setBounds(10, 290, 70, 20);

        getContentPane().add(jTextField5);
        jTextField5.setBounds(120, 200, 170, 19);

        jLabel8.setText("Remaining Iterations");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(120, 180, 150, 15);

        jButton6.setText("Draw");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton6);
        jButton6.setBounds(10, 200, 70, 20);

    }//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Add your handling code here:
        String str_rows,str_rnode;
        if(input == 1)
            return;
        str_rows = jTextField1.getText();
        if (str_rows.length() != 0) {
        try {
          rows = Integer.parseInt(str_rows);
        } catch (NumberFormatException nfe) {
          jTextField1.setText("");
          jTextField1.requestFocus();
          return;
        }
        }
        else{
           show_message("Enter rows");
            return;
        }
        
        if(rows > 10){
            jTextField1.setText("");
            jTextField1.requestFocus();
            show_message("Rows should be less than or equal to 10");
            //repaint();
            return;
        }
        
        str_rnode = jTextField2.getText();
        if(str_rnode.length() != 0){
            try{
                rnode = Float.parseFloat(str_rnode);
            }catch (NumberFormatException nfe){

               jTextField2.setText("");
               jTextField2.requestFocus();               
               return; 
            }
        }
        else{
            show_message("Enter reliability");
            return;
        }
        if(rnode > 1.0){
            jTextField2.setText("");
            jTextField2.requestFocus();
            show_message("Reliability of node should be less than or equal to 1.0");
            //repaint();
            return;
        }
        if(mesh_layout == 0){
            show_message("Select topology");
            return;
        }
        
        iterations = jSlider1.getValue();
        jProgressBar1.setValue(0);
        //repaint();
        jTextField3.setText("");        
        jTextField4.setText("");
        arrange_mesh();
        draw_mesh();
        jButton1.setEnabled(true);
        jButton6.setEnabled(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // Add your handling code here:
        int button,clickCount,x,y,i,j;
        java.awt.Graphics g = getGraphics();
        button = evt.getButton();
        clickCount = evt.getClickCount();
        x = evt.getX();
        y = evt.getY();
        for(i = 0; i<= rows ; i++){
            for(j = 0; j<= rows ; j++){
                if( (x >= mesh_spares[i][j].start_x) && (x <= mesh_spares[i][j].end_x) && (y >= mesh_spares[i][j].start_y) && (y <= mesh_spares[i][j].end_y)){
                    if(mesh_spares[i][j].input_fault_status == 0){
                        g.setColor(java.awt.Color.blue.white);
                        mesh_spares[i][j].input_fault_status = 1;
                    }
                    else{
                        g.setColor(java.awt.Color.blue.blue);
                        mesh_spares[i][j].input_fault_status = 0;
                    }
                    g.fillRect(mesh_spares[i][j].start_x,mesh_spares[i][j].start_y,10,10);
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked

    private void jSlider1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSlider1MouseReleased
        // Add your handling code here:
        int curr_itr_len;
        StringBuffer curr_itr = new StringBuffer(32);
        curr_itr_len = curr_itr.length();
        curr_itr.delete(0,curr_itr_len);
        iterations = jSlider1.getValue();
        curr_itr.insert(0,iterations);
        jTextField5.setText(curr_itr.toString());
    }//GEN-LAST:event_jSlider1MouseReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Add your handling code here:
        stop_run = 1;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Add your handling code here:
        show_message("N Number of rows and columns in\nthe interstetial mesh\nR Reliability of individual node\n1x4\n4 nodes have a single spare node\nand each spare can replace any of the 4 nodes\n2x4\n4 nodes have 2 spare nodes\nand each of the 2 spare nodes can replace any of the faulty main node\n4x4\nEach node has 4 spares nodes\nand each of the 4 spare nodes can replace any of the 4 main node\n\nLegend\nBlack node       Main Processor UP\nBlue Node        Spare Processor UP\nRed Node        Main Processor Faulty\nOrange Node      Spare Processor Faulty\n\nSimulation steps\nStep 1: Enter number of rows(N)\nStep 2: Enter reliability of individual node (R)\nStep 3: Click Draw\nStep 4: Select spare processors to be taken out of\nsimulation\nStep 5: Click Run\nStep 6: For next run click Clear and start from step 1");        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // Add your handling code here:
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        mesh_layout = 3;
        factor = 1.0;
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // Add your handling code here:
        jRadioButton1.setEnabled(false);
        jRadioButton3.setEnabled(false);
        mesh_layout = 2;
        factor = 1.01;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // Add your handling code here:
        jRadioButton2.setEnabled(false);
        jRadioButton3.setEnabled(false);
        mesh_layout = 1;
        //factor = 1.15;
        factor = 1.01;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Add your handling code here:
        jDialog1.hide();
        if(input == 1)
            draw_mesh();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        int i,j;
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jProgressBar1.setValue(0);
        jRadioButton1.setEnabled(true);
        jRadioButton2.setEnabled(true);
        jRadioButton3.setEnabled(true);
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jButton1.setEnabled(true);
        jButton6.setEnabled(true);
        mesh_layout = 0;
        for(i=0;i<=rows;i++)
            for(j=0;j<=rows;j++){
                mesh_spares[i][j].input_fault_status = 0;
            }
        repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        /*
        String str_rows,str_rnode;
        if(input == 1)
            return;
        str_rows = jTextField1.getText();
        if (str_rows.length() != 0) {
        try {
          rows = Integer.parseInt(str_rows);
        } catch (NumberFormatException nfe) {
          jTextField1.setText("");
          jTextField1.requestFocus();
          return;
        }
        }
        else{
           show_message("Enter rows");
            return;
        }
        
        if(rows > 10){
            jTextField1.setText("");
            jTextField1.requestFocus();
            show_message("Rows should be less than or equal to 10");
            //repaint();
            return;
        }
        
        str_rnode = jTextField2.getText();
        if(str_rnode.length() != 0){
            try{
                rnode = Float.parseFloat(str_rnode);
            }catch (NumberFormatException nfe){

               jTextField2.setText("");
               jTextField2.requestFocus();               
               return; 
            }
        }
        else{
            show_message("Enter reliability");
            return;
        }
        if(rnode > 1.0){
            jTextField2.setText("");
            jTextField2.requestFocus();
            show_message("Reliability of node should be less than or equal to 1.0");
            repaint();
            return;
        }
        if(mesh_layout == 0){
            show_message("Select topology");
            return;
        }
        
        iterations = jSlider1.getValue();
        jProgressBar1.setValue(0);
        repaint();
        jTextField3.setText("");        
        jTextField4.setText("");
         */
        jButton6.setEnabled(false);
        jButton1.setEnabled(false);
        input = 1;
    }//GEN-LAST:event_jButton1ActionPerformed

    public void run() {
        int iteration,res_len,curr_itr_len;
        StringBuffer result = new StringBuffer(32);
        StringBuffer curr_itr = new StringBuffer(32);
        double mesh_fail,mesh_rel,confidence;
        
        iterations = jSlider1.getValue();
        curr_itr_len = curr_itr.length();
        curr_itr.delete(0,curr_itr_len);
        curr_itr.insert(0,iterations);
        jTextField5.setText(curr_itr.toString());
        
         for(;;){
             while(input == 0);
             mesh_fail = 0;
             mesh_rel = 0;
             jProgressBar1.setMaximum(iterations-1);
             //arrange_mesh();
             draw_mesh();
             fail_count = 0;
             for(iteration = 0;iteration <iterations;iteration++){
                if(iteration % 10000 == 0){
                    jProgressBar1.setValue(iteration);
                    curr_itr_len = curr_itr.length();
                    curr_itr.delete(0,curr_itr_len);
                    curr_itr.insert(0,(iterations - iteration));
                    jTextField5.setText(curr_itr.toString());
                    draw_mesh();
                }
                init_mesh();
                assign_faults(iteration);
                assign_spares();
                //jProgressBar1.setValue(iteration);
                if(stop_run == 1){
                    stop_run = 0;
                    break;
                }
             }
             jProgressBar1.setValue(iteration);
             curr_itr_len = curr_itr.length();
             curr_itr.delete(0,curr_itr_len);
             curr_itr.insert(0,iterations - iteration);
             jTextField5.setText(curr_itr.toString());
             draw_mesh();
             

             temp_res = new Integer(iterations);
             mesh_fail = temp_res.floatValue();
             mesh_fail = fail_count/temp_res.floatValue();
             mesh_rel  = 1.0 - mesh_fail;
             res_len = result.length();
             result.delete(0,res_len);
             result.insert(0,mesh_rel);
             jTextField3.setText(result.toString());
             
             confidence = 1.96*java.lang.Math.sqrt((mesh_rel*(1.0-mesh_rel)/iterations));
             res_len = result.length();
             result.delete(0,res_len);
             result.append("R+/-");
             result.append(confidence);
             jTextField4.setText(result.toString());

             
             jRadioButton1.setEnabled(true);
             jRadioButton2.setEnabled(true);
             jRadioButton3.setEnabled(true);
             jRadioButton1.setSelected(false);
             jRadioButton2.setSelected(false);
             jRadioButton3.setSelected(false);
             /*
             jButton6.setEnabled(true);
             jButton1.setEnabled(true);
              **/
             mesh_layout = 0;
             factor = 1.0;
             input = 0;
         }
    }
    
    private void init_mesh(){
        int i,j;
        for(i=0;i<rows;i++)
            for(j=0;j<rows;j++){
                mesh_nodes[i][j].initState();
            }
        for(i=0;i<rows;i++)
            for(j=0;j<rows;j++){
                   mesh_spares[i][j].initState();
                }
    }
    
    private void arrange_mesh(){
        int i,j,k;
        NODES node;
        mesh_nodes = new NODES[rows][rows];
        mesh_spares = new SPARE[rows+1][rows+1];
        
        for(i=0;i<= rows;i++)
            for(j=0;j<=rows;j++){
                mesh_spares[i][j] = new SPARE();
            }
        for(i = 0; i< rows; i++)
            for(j = 0; j < rows; j++){
                mesh_nodes[i][j] = new NODES();
                mesh_nodes[i][j].addSpares(i,j,mesh_layout);
            }
    }
    
    private void draw_mesh(){
        int i,j,draw_rows,row_start,row_end;
        java.awt.Color c;
        java.awt.Graphics g = getGraphics();
        draw_rows = rows -1;
        //Big frame boxes
        for( i =0;i<draw_rows;i++){
                 for(j = 0; j<draw_rows; j++){
                    g.drawRect(350 + i*50,50 + j*50, 50,50);
                    
                 }
             }
             //Main processors.
             for( i = 0; i <= draw_rows; i++){
                 for(j = 0; j<= draw_rows; j++){
                     g.drawRect(350 + i*50 -5 ,50 + j*50 -5, 10,10);
                     g.fillRect(350 + i*50 -5 ,50 + j*50 -5, 10,10);
                 }
             }
             //Spare processors.
             if((mesh_layout == 3) && (draw_rows % 2 != 0)){
                 row_start = 0;
                 row_end   = draw_rows - 1;
             }
             else{
                 row_start = -1;
                 row_end   = draw_rows;
             }
             for( i = row_start; i <=row_end; i++){
                 for(j = row_start; j<=row_end; j++){
                     if((mesh_layout == 2) && (i + j) % 2 == 0){
                         continue;
                     }
                     if((mesh_layout == 3) && (i%2 != 0)) {
                         continue;
                     }
                     if((mesh_layout == 3)  && (j%2 != 0)) {
                         continue;
                     }
                     if(mesh_spares[i+1][j+1].input_fault_status == 1)
                         continue;
                     g.drawRect(350 + i*50 + 20 ,50 + j*50 + 20, 10,10);
                     c = g.getColor();
                     g.setColor(java.awt.Color.blue);
                     g.fillRect(350 + i*50 + 20 ,50 + j*50 + 20, 10,10);
                     g.setColor(c);
                     mesh_spares[i + 1][j + 1].start_x = 350 + i*50 + 20;
                     mesh_spares[i + 1][j + 1].end_x   = 350 + i*50 + 30;
                     mesh_spares[i + 1][j + 1].start_y = 50 + j*50 + 20;
                     mesh_spares[i + 1][j + 1].end_y   = 50 + j*50 + 30;
                     
                 }
           }

             for( i = 0; i <draw_rows; i++){
                 for(j = 0; j<draw_rows; j++){
                     if((mesh_layout == 2) && ((i + j) % 2 == 0)){
                         continue;
                     }
                     if((mesh_layout == 3) && (i%2 != 0)) {
                         continue;
                     }
                     if((mesh_layout == 3)  && (j%2 != 0)) {
                         continue;
                     }

                     
                        g.drawLine(350 + i*50,50 + j*50,350 + i*50 + 20 ,50 + j*50 + 20);
                        g.drawLine(350 + i*50,50 + (j + 1)*50,350 + i*50 + 20 ,50 + j*50 + 30);
                        g.drawLine(350 + (i + 1)*50,50 + j*50,350 + i*50 + 30 ,50 + j*50 + 20);
                        g.drawLine(350 + (i + 1)*50,50 + (j + 1)*50,350 + i*50 + 30 ,50 + j*50 + 30);
                 }
             }

        
        
             for(j=0;j<=draw_rows + 1;j++){
                if(j!=0){
                    switch(mesh_layout){
                        case 1:
                              g.drawLine(330,20 + j*50,350, j*50);
                              g.drawLine(320 +(draw_rows+1)*50, 20 + j*50,350+draw_rows*50,j*50);
                              break;
                        case 2:
                               if(( j % 2 ) == 0){
                                    continue;
                               }
                               else{
                                    if(draw_rows % 2 != 0){
                                        g.drawLine(320 +(draw_rows+1)*50, 20 + j*50,350+draw_rows*50,j*50);
                                    }
                                    else{
                                        g.drawLine(320 +(draw_rows+1)*50, j*50 - 20 ,350+draw_rows*50,j*50);
                                    }
                                    g.drawLine(330,20 + j*50,350, j*50);
                               }
                               break;
                        case 3:
                               if(( j % 2 ) == 0){
                                    continue;
                               }
                               else{
                                    if(draw_rows % 2 == 0){
                                        g.drawLine(320 +(draw_rows+1)*50, 20 + j*50,350+draw_rows*50,j*50);
                                        if(j <= draw_rows)
                                           g.drawLine(320 +(draw_rows+1)*50,30 + j*50 ,350+draw_rows*50,50+ j*50);
                                    }
                               }
                               break;
                    }
                 }
                 if(j<=draw_rows){
                    switch(mesh_layout){
                        case 1:
                                g.drawLine(330, 30 + j*50, 350, j*50+50);
                                g.drawLine(320 + (draw_rows+1)*50, 30 + j*50, 350 + draw_rows*50, j*50+50);
                                break;
                        case 2:
                                if(( j % 2) == 0){
                                    continue;
                                }
                                else{
                                    if(draw_rows % 2 != 0){
                                        g.drawLine(320 + (draw_rows+1)*50, 30 + j*50, 350 + draw_rows*50, j*50+50);
                                    }
                                    else{
                                        g.drawLine(320 + (draw_rows+1)*50, 70 + j*50, 350 + draw_rows*50, 50 + j*50);
                                    }
                                    g.drawLine(330, 30 + j*50, 350, j*50+50);
                                }
                                break;
                        case 3:                                
                                break;
                                
                    }
                    
                 }
                 
             }
        
             
             for(i=1;i<draw_rows + 1;i++){
                 switch(mesh_layout){
                     case 1:
                         g.drawLine(330 + i*50,30,350+ i*50,50);
                         g.drawLine(330 + i*50,20 + (draw_rows+1)*50,350+ i*50,50*(draw_rows+1));
                         g.drawLine(320 + i*50, 30, 300 + i*50 ,50);
                         g.drawLine(320 + i*50, 20 + (draw_rows+1)*50, 300 + i*50, (draw_rows +1)*50);
                         g.drawLine(370 + i*50, 20 + (draw_rows+1)*50, 350 + i*50, (draw_rows +1)*50);
                         break;
                     case 2:
                         if( (i % 2) != 0){
                             g.drawLine(330 + i*50,30,350+ i*50,50);
                             g.drawLine(320 + i*50,30, 300 + i*50,50);
                             if(draw_rows % 2 != 0){
                                g.drawLine(330 + i*50,20 + (draw_rows+1)*50,350+ i*50,50*(draw_rows+1));
                                g.drawLine(320 + i*50, 20 + (draw_rows+1)*50, 300 + i*50, (draw_rows +1)*50);
                             }
                             else{
                                g.drawLine(280 + i*50,20 + (draw_rows+1)*50,300+ i*50,50*(draw_rows+1));
                                g.drawLine(370 + i*50, 20 + (draw_rows+1)*50, 350 + i*50, (draw_rows +1)*50);
                                 
                             }
                         }
                         break;
                     case 3:
                         if( (i % 2) != 0){
                             if(draw_rows % 2 == 0){
                                g.drawLine(330 + i*50,20 + (draw_rows+1)*50,350+ i*50,50*(draw_rows+1));
                                g.drawLine(320 + i*50, 20 + (draw_rows+1)*50, 300 + i*50, (draw_rows +1)*50);
                             }
                         }
                 }
             }
        if((mesh_layout == 2) && (draw_rows % 2 == 0)){
            g.drawLine(320 + i*50,30, 300 + i*50,50);
            g.drawLine(280 + i*50,20 + (draw_rows+1)*50,300+ i*50,50*(draw_rows+1));            

        }
        
         
    }
    
    public void assign_faults(int curr_itr) {
        int i,j,draw_rows,row_end,row_start,draw = 1;
        long int_rel;
        double node_rel;
        //java.awt.Color c;
        java.awt.Graphics g = getGraphics();
        Random r = new Random();    
        draw_rows = rows -1 ;
        for(i=0;i<rows;i++)
            for(j=0;j<rows;j++){
                node_rel = r.nextDouble();
                if(node_rel/factor > rnode){
                    if(curr_itr % 10000 == 0){
                        g.setColor(java.awt.Color.blue.red);
                        g.fillRect(350 + i*50 -5,50 + j*50 - 5,10,10);
                    }
                    mesh_nodes[i][j].setStatus(DOWN);
                }
                else{
                    mesh_nodes[i][j].setStatus(UP);
                }
            }
        if(mesh_layout == 3){
            row_start = 1;
            row_end   = rows;
        }
        else{
            row_start = 0;
            row_end = rows;
        }
        //System.out.println("Spares");
        for(i=row_start;i<=row_end;i++){
            for(j=row_start;j<=row_end;j++){
                if(mesh_layout == 2) {
                    if( (i + j) % 2 == 0){
                        continue;
                    }
                }
               //System.out.println("Hi 1");
                if(mesh_layout == 3){
                    if( ((j % 2) == 0) || (( i + j) % 2 != 0) )
                        continue;
                }
          
                node_rel = r.nextDouble();
                if(mesh_spares[i][j].input_fault_status == 1){
                    continue;
                }
                
                if(node_rel/factor> rnode){
                    if(curr_itr % 10000 == 0){
                        g.setColor(java.awt.Color.blue.orange);
                        g.fillRect(300 + i*50 + 20 ,j*50 + 20, 10,10);
                    }
                    //System.out.println(i+j);
                    mesh_spares[i][j].setStatus(DOWN);
                }
                else{
                    mesh_spares[i][j].setStatus(UP);
                }
                    
            }
        }
    }
    
    public void assign_spares() {
        int i,j,k,x,y,spare_found,spare_count;
        COORDINATE backup;
        for(i=0;i<rows;i++)
            for(j=0;j<rows;j++){
                if(mesh_nodes[i][j].getStatus() == UP){
                    continue;
                }
                else{
                    spare_found = FAILURE;
                    switch(mesh_layout){
                        case 1:
                            spare_count = 4;
                            break;
                        case 2:
                            spare_count = 2;
                            break;
                        default:
                            spare_count = 1;
                    }
                    for(k=0;k<spare_count;k++){
                        x = mesh_nodes[i][j].getBackupX(k);
                        y = mesh_nodes[i][j].getBackupY(k);
                        if((mesh_spares[x][y].getFaultStatus() == UP)&& 
                        (mesh_spares[x][y].checkUsed() == FREE)&&
                        (mesh_spares[x][y].input_fault_status == 0)){
                            mesh_spares[x][y].setUsed();
                            spare_found = SUCCESS;
                            break;
                        }
                        else{
                            continue;
                        }
                }
                    if(spare_found == FAILURE)
                    {
                        fail_count++;
                        return;
                    }
                }
        }
    }
                
    public void show_message(java.lang.String msg) {
            jDialog1.setLocation(400,300);
            jDialog1.setSize(482,376);
            jDialog1.setTitle("Error message");
            jDialog1.show();
            jTextArea1.setText(msg);
    }    
                    
    
    private int rows,input;
    private Thread CThread;
    private SPARE[][] mesh_spares;
    private NODES[][] mesh_nodes;
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
    
    private java.lang.Integer temp_res;
    
    private java.awt.Graphics g;
    
    private int iterations;
    
    private float rnode = 0;    
    
    private int UP = 1;    
    
    private static int DOWN = -1;    
    
    private int fail_count = 0;
    
    private static int SUCCESS = 1;
    
    private int FREE = 1;
    
    private int USED = -1;
    
    private int FAILURE = -1;
    
    private int mesh_layout = 0;
    
    private int stop_run;
    
    private double factor = 1.0;
    
}

class SPARE {
    
    private int refCount = 0;
    
    private int spr_i;
    
    private int spr_j;
    
    private static int FREE = 1;
    
    private static int USED = -1;
    
    private int status = FREE;
    
    private int UP = 1;
    
    private int fault_status = UP;
    
    public int start_x;    
    
    public int start_y;    
    
    public int end_x;    
    
    public int end_y;
    
    public int input_fault_status;
    
    public void initState(){
        status = FREE;
        fault_status = UP;
    }
    
    public void incRef() {
        refCount++;
    }
    
    public void setUsed() {
        status = USED;
    }
    
    public int checkUsed() {
        return status;
        
    }
    
    public void setCoordinates(int i, int j) {
        spr_i = i;
        spr_j = j;
    }
    
    public void setStatus(int state){
        fault_status = state;
    }
    
    public int getFaultStatus() {
        return fault_status;
    }
    
}

class NODES {
    private COORDINATE[] spares;
    
    private static int NOT_USED = 1;
    
    private int SUCCESS = 1;
    
    private int FAILURE = -1;
    
    private int UP = 1;
    
    private int status = UP;
    
    public void initState(){
        status = UP;
    }
    
    public NODES() {
        spares = new COORDINATE[4];
    }
    
    public void addSpares(int spareI, int spareJ, int mesh_layout) {
        int k,spare_count,x,y;
        //System.out.println("Node "+spareI+","+spareJ);
        switch(mesh_layout){
            case 1:
                spare_count = 4;
                break;
            case 2:
                spare_count = 2;
                break;
            case 3:
                spare_count = 1;
                break;
            default:
                spare_count = 0;
                break;
        }
        if(spare_count == 1){
            if((spareI % 2) == 0){
                x = spareI + 1;
            }
            else{
                x = spareI;
            }
            if((spareJ % 2) == 0){
                y = spareJ + 1;
            }
            else{
                y = spareJ;
            }
           spares[0] = new COORDINATE();
           spares[0].setCoordinates(x,y);
           return;     
        }
        
        for(k = 0; k < spare_count; k++){
            spares[k] = new COORDINATE();
            switch(k){
                case 0:
                    spares[k].setCoordinates(spareI + 1,spareJ);
                    break;
                case 1:
                    spares[k].setCoordinates(spareI,spareJ + 1);
                    break;
                case 2:
                    spares[k].setCoordinates(spareI,spareJ);
                    break;
                case 3:
                    spares[k].setCoordinates(spareI + 1,spareJ + 1);
                    break;
            }
        }
    }    
    
    public void setStatus(int state) {
        status = state;
    }
    
    public int getStatus() {
        return status;
    }
    
    public int getBackupX(int k) {
        return spares[k].getX();
        }
    
    public int getBackupY(int k) {
        return spares[k].getY();
    }
}

class COORDINATE {
    
    private int coor_x;
    
    private int coor_y;
    
    public void setCoordinates(int x, int y) {
        coor_x = x;
        coor_y = y;
        //System.out.println("setCoordinates x,y "+coor_x+","+coor_y);
    }
    
    public COORDINATE getCoordinate() {
        return this;
    }
    
    public int getX() {
        //System.out.println("GetX X "+coor_x);
        return coor_x;
    }
    
    public int getY() {
        //System.out.println("GetY Y "+coor_y);
        return coor_y;
    }
    
}
