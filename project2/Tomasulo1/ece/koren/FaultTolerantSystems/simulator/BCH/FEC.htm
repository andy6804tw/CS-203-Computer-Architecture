<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="FEC_files/filelist.xml">
<link rel=Edit-Time-Data href="FEC_files/editdata.mso">
<link rel=OLE-Object-Data href="FEC_files/oledata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Forward Error Correction (FEC) codes can detect and correct a limited
number of errors without retransmitting the data stream</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="City"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Yuechun Chu</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Yuechun Chu</o:LastAuthor>
  <o:Revision>16</o:Revision>
  <o:TotalTime>110</o:TotalTime>
  <o:Created>2003-05-23T06:12:00Z</o:Created>
  <o:LastSaved>2003-07-03T15:02:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>909</o:Words>
  <o:Characters>5118</o:Characters>
  <o:Company>Umass</o:Company>
  <o:Lines>102</o:Lines>
  <o:Paragraphs>18</o:Paragraphs>
  <o:CharactersWithSpaces>6009</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>2</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:PMingLiU;
	panose-1:2 2 3 0 0 0 0 0 0 0;
	mso-font-alt:ÐÂ¼šÃ÷ów;
	mso-font-charset:136;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 137232384 22 0 1048577 0;}
@font-face
	{font-family:"\@PMingLiU";
	panose-1:2 2 3 0 0 0 0 0 0 0;
	mso-font-charset:136;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 137232384 22 0 1048577 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:PMingLiU;
	mso-fareast-language:ZH-TW;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1589729636;
	mso-list-type:hybrid;
	mso-list-template-ids:439802784 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="7170"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in' bgcolor='white'>

<div class=Section1>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:20.0pt;color:red'>Introduction<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><span style='font-size:14.0pt'>Forward Error Correction
(FEC) codes can detect and correct a limited number of errors without
retransmitting the data stream. There are two basic types of FEC codes: Block
codes and Convolution codes. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>The significant example of
Block code is BCH code. As other block code, BCH encodes k data bits into n
code bits by adding n-k parity checking bits for the purpose of detecting and
checking the errors.<span style='mso-spacerun:yes'>&nbsp; </span>Given the
length of the codes is <sub><!--[if gte vml 1]><v:shapetype id="_x0000_t75"
 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
 filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:49.8pt;
 height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image012.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=66 height=22
src="FEC_files/image002.gif" v:shapes="_x0000_i1025"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1025"
  DrawAspect="Content" ObjectID="_1118735332">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'>&nbsp;</span>for any integer
m¡Ý3, we will have t (where t&lt;<sub><!--[if gte vml 1]><v:shape id="_x0000_i1026"
 type="#_x0000_t75" style='width:31.2pt;height:15pt' o:ole="">
 <v:imagedata src="FEC_files/image014.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=42 height=20
src="FEC_files/image004.gif" v:shapes="_x0000_i1026"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1026"
  DrawAspect="Content" ObjectID="_1118735333">
 </o:OLEObject>
</xml><![endif]-->), is the bound of the error correction. That is, BCH can
correct any combination of errors (burst or separate) fewer than t in the
n-bit-codes. The number of parity checking bits is n-<span class=SpellE>k¡Ümt</span>.
<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>An important concept for BCH
is Galois Fields (GF), which is a finite set of elements on which two binary
addition and multiplication can be defined. For any prime number p there is <span
class=GramE>GF(</span>p) and GF(<sub><!--[if gte vml 1]><v:shape id="_x0000_i1027"
 type="#_x0000_t75" style='width:22.8pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image016.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=30 height=24
src="FEC_files/image006.gif" v:shapes="_x0000_i1027"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1027"
  DrawAspect="Content" ObjectID="_1118735334">
 </o:OLEObject>
</xml><![endif]-->is called extended field of GF(p). We often use <span
class=GramE>GF(</span><sub><!--[if gte vml 1]><v:shape id="_x0000_i1028"
 type="#_x0000_t75" style='width:21pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image018.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=28 height=24
src="FEC_files/image036.gif" v:shapes="_x0000_i1028"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1028"
  DrawAspect="Content" ObjectID="_1118735335">
 </o:OLEObject>
</xml><![endif]-->in BCH code. A GF can be constructed over a primitive
polynomial such as <sub><!--[if gte vml 1]><v:shape id="_x0000_i1029" type="#_x0000_t75"
 style='width:82.8pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image020.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=110 height=24
src="FEC_files/image037.gif" v:shapes="_x0000_i1029"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1029"
  DrawAspect="Content" ObjectID="_1118735336">
 </o:OLEObject>
</xml><![endif]-->(The construction and arithmetic of GF are in ¡°Error Control
Coding¡±, by <span class=SpellE>Shu</span> Lin). Usually, GF table records all
the variables, including expressions for the elements, minimal polynomial, and
generator polynomial. By referring to the table, we can locate a proper
generator polynomial for encoder. For example, when (n, k, t<span class=GramE>)=</span>(15,
7, 2), a possible generator is <sub><!--[if gte vml 1]><v:shape id="_x0000_i1030"
 type="#_x0000_t75" style='width:132pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image022.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=176 height=24
src="FEC_files/image038.gif" v:shapes="_x0000_i1030"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1030"
  DrawAspect="Content" ObjectID="_1118735337">
 </o:OLEObject>
</xml><![endif]-->. If we have a data stream<sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1031" type="#_x0000_t75" style='width:108pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image024.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=144 height=24
src="FEC_files/image039.gif" v:shapes="_x0000_i1031"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1031"
  DrawAspect="Content" ObjectID="_1118735338">
 </o:OLEObject>
</xml><![endif]-->, the codeword would be <sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1032" type="#_x0000_t75" style='width:42pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image026.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=56 height=22
src="FEC_files/image040.gif" v:shapes="_x0000_i1032"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1032"
  DrawAspect="Content" ObjectID="_1118735339">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'>&nbsp;</span>and have the
style <span class=GramE>of </span><sub><!--[if gte vml 1]><v:shape id="_x0000_i1033"
 type="#_x0000_t75" style='width:138pt;height:19.2pt' o:ole="">
 <v:imagedata src="FEC_files/image028.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=184 height=26
src="FEC_files/image041.gif" v:shapes="_x0000_i1033"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1033"
  DrawAspect="Content" ObjectID="_1118735340">
 </o:OLEObject>
</xml><![endif]-->.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>The decoder of BCH is
complicated because it has to locate and correct the errors. Suppose we have a
received codeword<sub><!--[if gte vml 1]><v:shape id="_x0000_i1034" type="#_x0000_t75"
 style='width:162pt;height:19.2pt' o:ole="">
 <v:imagedata src="FEC_files/image030.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=216 height=26
src="FEC_files/image042.gif" v:shapes="_x0000_i1034"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1034"
  DrawAspect="Content" ObjectID="_1118735341">
 </o:OLEObject>
</xml><![endif]-->, <span class=GramE>then </span><sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1035" type="#_x0000_t75" style='width:88.8pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image032.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=118 height=22
src="FEC_files/image043.gif" v:shapes="_x0000_i1035"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1035"
  DrawAspect="Content" ObjectID="_1118735342">
 </o:OLEObject>
</xml><![endif]-->, where, v(x) is correct codeword and e(x) is the error.
First, we must compute a syndrome vector s=<sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1036" type="#_x0000_t75" style='width:60pt;height:18pt' o:ole="">
 <v:imagedata src="FEC_files/image034.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=80 height=24
src="FEC_files/image044.gif" v:shapes="_x0000_i1036"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1036"
  DrawAspect="Content" ObjectID="_1118735343">
 </o:OLEObject>
</xml><![endif]-->, which can be achieved by calculating<sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1037" type="#_x0000_t75" style='width:34.2pt;height:15pt' o:ole="">
 <v:imagedata src="FEC_files/image050.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=46 height=20
src="FEC_files/image045.gif" v:shapes="_x0000_i1037"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1037"
  DrawAspect="Content" ObjectID="_1118735344">
 </o:OLEObject>
</xml><![endif]-->, where, H is parity-check matrix and can be defined as:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1038" type="#_x0000_t75" style='width:178.2pt;height:91.8pt'
 o:ole="">
 <v:imagedata src="FEC_files/image051.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=238 height=122
src="FEC_files/image046.gif" v:shapes="_x0000_i1038"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1038"
  DrawAspect="Content" ObjectID="_1118735345">
 </o:OLEObject>
</xml><![endif]-->.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><span
style='mso-spacerun:yes'>&nbsp;</span>Here<span class=GramE>,</span><sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1039" type="#_x0000_t75" style='width:12pt;height:10.8pt' o:ole="">
 <v:imagedata src="FEC_files/image052.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=16 height=14
src="FEC_files/image047.gif" v:shapes="_x0000_i1039"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1039"
  DrawAspect="Content" ObjectID="_1118735346">
 </o:OLEObject>
</xml><![endif]-->is the element of the GF field and can be located in the GF
table.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><span
style='mso-spacerun:yes'>&nbsp;</span><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>With syndrome, error-location
polynomial <sub><!--[if gte vml 1]><v:shape id="_x0000_i1040" type="#_x0000_t75"
 style='width:27pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image053.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=36 height=22
src="FEC_files/image048.gif" v:shapes="_x0000_i1040"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1040"
  DrawAspect="Content" ObjectID="_1118735348">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'>&nbsp;</span>can be determined.
<span class=SpellE>Berkekamp¡¯s</span> iterative algorithm is one of solutions
to calculate the error-location polynomial. By finding roots of<sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1041" type="#_x0000_t75" style='width:27pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image053.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=36 height=22
src="FEC_files/image048.gif" v:shapes="_x0000_i1041"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1041"
  DrawAspect="Content" ObjectID="_1118735349">
 </o:OLEObject>
</xml><![endif]-->, the location numbers for the errors will be achieved.<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-spacerun:yes'>&nbsp;</span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:20.0pt;color:red'>Usage<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><span style='font-size:14.0pt'>The program is developed with
Java applet. Basically, the implementation involves three steps: Encoder, Error
adding, Decoder. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l0 level1 lfo2;
tab-stops:list .25in .5in'><![if !supportLists]><span style='font-size:16.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;
color:blue'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:16.0pt;color:blue'>Encoder<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:6.0pt;text-indent:30.0pt'><span
class=GramE><span style='font-size:14.0pt'>m</span></span><span
style='font-size:14.0pt'> and t are available for adjusting. As mentioned
above, the codeword length will be<sub><!--[if gte vml 1]><v:shape id="_x0000_i1042"
 type="#_x0000_t75" style='width:49.8pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image012.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=66 height=22
src="FEC_files/image049.gif" v:shapes="_x0000_i1042"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1042"
  DrawAspect="Content" ObjectID="_1118735350">
 </o:OLEObject>
</xml><![endif]-->. <span class=GramE>t</span> is the bound of error
correction. With m and t being settled, the length of data bits is k=n-<span
class=SpellE>mt</span>.<span style='mso-spacerun:yes'>&nbsp; </span>Although
the program itself has no boundary for m, considering the display limitation, m
will be set between 3 and 7. The range checking for m and t are available, if m
and t are set to unreasonable values, a red color will be filled input area and
program will keep wait for proper inputs. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:6.0pt;text-indent:30.0pt'><span
style='font-size:14.0pt'>. User will be able to choose either to manually type
data stream in binary (user generate) or allow program to randomly generate
data stream (randomly generate). If ¡°user generate¡± is chosen, user has to type
the data stream, whose length is exact K=n-<span class=SpellE>mt</span>.
Otherwise, when ¡°user <span class=SpellE>gen</span>¡± being click, a range
checking function will fill the input area with red, indicating the data length
is incorrect. If ¡°randomly generate¡± is selected, upon m and t being settled,
the program will randomly generate a data stream and encoder it into codeword. <br>
<span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>With
the ¡°random <span class=SpellE>gen</span>¡± or ¡°user <span class=SpellE>gen</span>¡±
button being clicked, the original signal, BCH codeword and its generator
sequence (<sub><!--[if gte vml 1]><v:shape id="_x0000_i1043" type="#_x0000_t75"
 style='width:25.8pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image054.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=34 height=22
src="FEC_files/image010.gif" v:shapes="_x0000_i1043"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1043"
  DrawAspect="Content" ObjectID="_1118735351">
 </o:OLEObject>
</xml><![endif]-->, It comes from GF and constructs the codeword) will be
displayed. Meanwhile, the data stream and BCH codeword will be show the plot
graph underneath.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l0 level1 lfo2;
tab-stops:list .25in .5in'><![if !supportLists]><span style='font-size:16.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;
color:blue'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:16.0pt;color:blue'>Error Adding<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:14.0pt'>In
order to evaluate the capability of BCH codes, user is allowed to decide number
of errors that will happen to codeword. Besides, two error-assignment styles
will be available to be selected:<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><u><span style='font-size:14.0pt'>Random</span></u><span
style='font-size:14.0pt'>: The faulty bits will be randomly selected from the
codeword;<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><u><span style='font-size:14.0pt'>Burst</span></u><span
style='font-size:14.0pt'>:<span style='mso-spacerun:yes'>&nbsp; </span>The
faulty bits will be consecutive, and user is allowed to set start position for
burst error. In random styles, the start position will be set to ¡°-1¡±, meaning
not available for adjustment.<span style='mso-spacerun:yes'>&nbsp; </span>If
the start position that user set exceeds the length of the codeword, the
program will coerce the start position back to signal range. It is well know
that burst errors are hard for normal other error correction codes to deal
with. But user will find burst or separate errors make no difference for BCH
code, which is an advantage of BCH code. When ¡°adding error¡± is clicked, the
receiving code with error bits will be displayed. Meanwhile, corresponding
receiving code will be shown in the plot graph. On the receiving curve, a red
¡°E¡± will appear on the error bit. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.5in;mso-list:l0 level1 lfo2;
tab-stops:list .25in .5in'><![if !supportLists]><span style='font-size:16.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;
color:blue'><span style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:16.0pt;color:blue'>Decoder<o:p></o:p></span></b></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:.25in'><span
style='font-size:14.0pt'>The decoder will be triggered by user clicking the
¡°decode¡±. The decoder will give the results of error corrections, including: <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>decoded signal;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>sigma(x): <sub><!--[if gte vml 1]><v:shape
 id="_x0000_i1044" type="#_x0000_t75" style='width:27pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image055.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=36 height=22
src="FEC_files/image008.gif" v:shapes="_x0000_i1044"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1044"
  DrawAspect="Content" ObjectID="_1118735352">
 </o:OLEObject>
</xml><![endif]-->, it is the error-location polynomial and calculated by <span
class=SpellE>Berkekamp¡¯s</span> iterative algorithm, which is a quite complex
procedure;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>root: the roots
for <sub><!--[if gte vml 1]><v:shape id="_x0000_i1045" type="#_x0000_t75"
 style='width:27pt;height:16.2pt' o:ole="">
 <v:imagedata src="FEC_files/image055.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=36 height=22
src="FEC_files/image008.gif" v:shapes="_x0000_i1045"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1045"
  DrawAspect="Content" ObjectID="_1118735353">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'>&nbsp;</span>and they are the
position number of errors;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>S(x): Syndrome,
which is essential for the decoder (details are discussed above);<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>The number of
corrected errors;<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .5in'><![if !supportLists]><span style='font-size:14.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>¡¤<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:14.0pt'>The text message,
which indicates whether all the error bits have been corrected. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.25in'><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-size:14.0pt'>The
decoded signal will also be shown in the plot graph. If the number of errors
exceeds t, the decoder will fail to correct all the errors. In that case, some
of ¡°<span class=SpellE>E¡±s</span> will be left to indicate that some errors are
still there.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>Reference:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'>[1] <span class=SpellE>Shu</span>
Lin, ¡°Error Control Coding: Fundamentals and Applications¡±, </span><st1:City><st1:place><span
  style='font-size:14.0pt'>Englewood</span></st1:place></st1:City><span
style='font-size:14.0pt'> Cliffs, N.J., Prentice-Hall, 1983.<o:p></o:p></span></p>

<p class=MsoNormal><span class=GramE><span style='font-size:14.0pt'>[2] William
Stallings, ¡°Wireless Communications and Networks¡±, Prentice Hall, 2002.</span></span><span
style='font-size:14.0pt'><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
