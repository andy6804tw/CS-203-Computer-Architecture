<html>

<head>
<title>Help Window</title>
</head>

<body>

<p align="center"><u><span style="letter-spacing: 5"><font size="5" color="#000099">Reorder
Buffer Simulator</font></span></u></p>

<p align="center"><font size="5"><b><u>Help Window</u></b></font></p>

<p>Note: This Simulator does not work with old Internet Explorer versions</p>


<p>To do a simulation do the following:</p>


<b>1. Make all the desired configurations in the CONFIGURATION WINDOW, which is
    displayed at the beginning&nbsp;</b>
<p><img border="0" src="config.jpg" width="1004" height="612"></p>
<p>Attention: When you click on the &quot;CONFIGURATION&quot;-button, all
settings will be reset to their default values.</p>
<p><b><u>Some Configuration Window entries:</u></b></p>
<p><u>Instructions</u>:</p>
<blockquote>
  <p><u>opcode</u>: if you choose R.D or S.D, only the first operand (dest.) is
  relevant. The other two will be ignored by the simulator.</p>
  <p><u>causes an exception</u>: here you can mark all instructions that should
  cause an exception during execution.</p>
</blockquote>
<p><u>FUs</u>:</p>
<blockquote>
  <p><u>FP-Adder</u>: executes ADD.D and SUB.D</p>
  <p><u>FP-Multiplier</u>: executes MUL.D</p>
  <p><u>FP-Divider</u>: executes DIV.D</p>
  <p><u>Number</u>: number of the respective FU</p>
  <p><u>Ex. Cycles</u>: pipeline stages of the respective FU</p>
  <p><u># of RSs</u>: number of Reservation Stations for each FU (e.g.: number =
  3 and # of RSs = 3 results in a total RS count of 9)</p>
</blockquote>
  <p><u>Number of Instructions:</u></p>
<blockquote>
  <p>To change the number of instructions first select the desired number and
  then click on the &quot;change&quot;-button.&nbsp;</p>
</blockquote>
<p><u>Examples:</u></p>
<blockquote>
<p>There are some simulation configuration examples available beside the default
settings. If you click on the &quot;Examples&quot;-button the Simulation Control window
will be replaced by the Examples window. All entries in the Configuration Window
will be set properly when you click on one of the buttons in the Example window.</p>
<p>Example1:</p>
  <blockquote>
<p>This example demonstrates how much the number of ROB entries can effect the
execution time. With 8 ROB entries 90 clock cycles are needed to execute the
code segment and with 4 ROB entries 167 clock cycles are needed.</p>
  </blockquote>
<p>Example2:</p>
<blockquote>
  <p>This example shows, that it does not make sense to implement two CDBs in a
  single issue processor, which can only handle a single instruction commit per
  clock cycle.</p>
</blockquote>
</blockquote>
<p>&nbsp;To start the simulation you have to return to the Simulation Control
window again by clicking on the &quot;Simulation Control&quot;-button.</p>

<p><img border="0" src="examples.jpg" width="1005" height="612"></p>

<p>&nbsp;</p>

<p><b>2. When you are done with configuring the simulation, click on the &quot;START SIMULATION&quot;-button on the bottom of the Control Window to
start the simulation.&nbsp;</b></p>

<p>&nbsp;</p>

<p><img border="0" src="simulation.jpg" width="1020" height="599"></p>

<p>&nbsp;</p>
<p><b>3. You can control the simulation with the &quot;+1 Clock Cycle&quot;-button
    (simulation proceeds one clock cycle) and with the &quot;+5 Clock
    Cycles&quot;-button (simulation proceeds five clock cycles).&nbsp;</b></p>
<p><b>4. The simulation is done, when all displayed entries are empty. To configure
    a new simulation, click on the &quot;CONFIGURATION&quot;-button to return to
    the CONFIGURATION WINDOW.</b></p>
<p>&nbsp;</p>
<p>In the figure below the SUB.D instruction has caused an exception. All
entries in the ROB that will be cleared due to this exception are colored red</p>
<p><img border="0" src="exception.jpg" width="1019" height="620"></p>

<p>&nbsp;</p>

<p><u>Implementation Notes</u></p>
<ul>
  <li>In this simulator a Result Shift Register is used to assure that only as
    many instructions(1 or 2) can finish execution at the same time as CDBs are
    available. This means that an instruction that has both its operands
    available&nbsp; will only begin execution if a CDB will be available at the
    time that it will finish execution.</li>
  <li>Load instructions do not use the Result Shift Register, because in a real
    processor the load latencies are not constant. If the data is ready to be
    broadcasted on a CDB and no CDB is available, it is stored in the load
    buffer as long as no CDB is available.</li>
  <li>The function of the store buffer is integrated into the ROB</li>
</ul>
<p><u>Assumptions</u></p>
<ul>
  <li>The effective address calculation of loads and stores is done in the issue
    clock cycle of those instructions, i.e. no latency for effective address
    calculation is added. </li>
  <li>The load latencies are all the same.</li>
</ul>
<p>&nbsp;</p>

</body>

</html>
