<html>
	<head>
		<meta http-equiv="Content-Language" content="en-us">
		<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
		<meta name="ProgId" content="FrontPage.Editor.Document">
		<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
		<title>Scoreboarding Interface</title> 
		<!-----base target="main"  ---->
		<SCRIPT language="JavaScript">
/*---------------------------------------------------------------------------------------------------*/
/* 			 						VARIABLE DECLARATION 											 */
/*---------------------------------------------------------------------------------------------------*/

var max_no_instr = 10;
var instr_status = new Array(max_no_instr);
for (i=0;i<max_no_instr;i++)
{
	instr_status[i] = new Array(5);
}
var next_status = new Array(max_no_instr);

var instr = new Array(max_no_instr);
for (i=0;i<max_no_instr;i++)
{
	instr[i] = new Array(8);
}

var no_of_func = 5;
var fu_status2 = new Array(no_of_func);
for (i=0;i<no_of_func;i++)
	fu_status2[i] = new Array(11);

var fu_status1 = new Array(no_of_func);
for (i=0;i<no_of_func;i++)
	fu_status1[i] = new Array(11);


var no_of_reg = 32;
var reg_result1 = new Array(no_of_reg);
var reg_result2 = new Array(no_of_reg);



// Different States of the instruction
var issue = 0;
var readop = 1;
var execute = 2;
var write_result = 3;
var complete = 4;

//Different functional units
var integer = 0;
var mult1 = 1;
var mult2 = 2;
var MULT = 5;
var add = 3;
var divide = 4;

//Different fields in the functional unit status array
var fu_name = 0;
var busy = 1;
var op = 2;
var Fi = 3;
var Fj = 4;
var Fk = 5;
var Qj = 6;
var Qk = 7;
var Rj = 8;
var Rk = 9;
var exec = 10;

// Different fields in the instruction

var oper = 0;
var des = 1;
var s1 = 2;
var s2 = 3;
var fu = 4;
var op_name = 5;
var status = 6;
var exec_cycle = 7;


var clock = 0;
var no_of_instr,i,j,next_status,current_issue,instr_no,upper_limit,update_flag,type_of_output,req_clock;
var counter=0;
/*---------------------------------------------------------------------------------------------------*/
/* 										END OF VARIABLE DECLARATION 							 	*/
/*--------------------------------------------------------------------------------------------------*/



/*---------------------------------------------------------------------------------------------------*/
/* 											VALIDATE THE MIPS CODE 									*/
/*--------------------------------------------------------------------------------------------------*/
function validate(form) 
{
	no_of_instr = form.number.value;


	if ((no_of_instr<1)||(no_of_instr>10)) 
	{
		alert("Invalid no. of instructions. Please type a number between 1-10")
		return(false);
	} 



	if ((form.execinteger.value<=0) || (form.execadd.value<=0) || (form.execmultiply.value<=0) || (form.execdivide.value<=0))
	{
		alert("Invalid number of execution cycles. Please enter a number greater than 0")
		return(false);
	}


	if ((form.execinteger.value == "") || (form.execadd.value == "") || (form.execmultiply.value == "") || (form.execdivide.value == ""))
	{
		alert("Invalid (Null) number of execution cycles. Please enter a number greater than 0")
		return(false);
	}



	if (document.instruction.output[0].checked == true)
	{
		type_of_output = 1;
	}

	if (document.instruction.output[1].checked == true)
	{
		type_of_output = 2;
	}

	if (document.instruction.output[2].checked == true)
	{
		type_of_output = 3;
		req_clock = form.clock.value
		
		if ((req_clock < 1) || (req_clock == "")) 
		{
			alert("Invalid no. of Clock cycles. Please type a number greater than or equal to 1")
			return(false);
		} 
		
	}

	var end = (4*no_of_instr)+1;
	var chk = new Array(end);

	// Get all the form values into an array called "chk". The first element will be the instr_no.

/*	for (i=0;i<=end;i++)
	{
		chk[i] = form.elements[i].value;
	}
*/
for (i=0;i<end;i++)
	{
		if(((i-1)%4) == 0)
		{
			chk[i] = form.elements[i].options[form.elements[i].selectedIndex].value;
		}
		else
		{
			chk[i] = form.elements[i].value
		}
	}




	//Validation to see that all entries are correct.


	for (i=0;i<no_of_instr;i++)
	{

		var I = i+1;

		
		var chk_D = chk[(4*i)+1]; /*This gives the Instruction name*/
		var chk_R = chk[(4*i)+2]; /*This gives the first text box*/
		var chk_S = chk[(4*i)+3]; /*This gives the second text box*/
		var chk_T = chk[(4*i)+4]; /*This gives the third text box*/
		



		var testF1 = chk_R.slice(0,1); /*This gets the first alphabet of the first text box say "F" for an entry F23*/
		var testD1 = chk_R.slice(1,3); /*This gets the second and third alphabet of the first text box say "23" for an 									entry F23*/


		var testF2 = chk_S.slice(0,1);/*This gets the first alphabet of the second text box say "F" for an entry F23*/
		var testD2 = chk_S.slice(1,3);/*This gets the second and third alphabet of the second text box say "23" for an 									entry F23*/

			
		if (testD2 == "")/*To check the condition when the entry may have only 1 digit say "F23 5 4". Here we just have 				'5'. If this is the case set the remaining part as 'x' as default.*/
		{
			testD2 = "x";
		}

			
			
		var testF3 = chk_T.slice(0,1);
		var testD3 = chk_T.slice(1,3);


		if (testD3 == "")/*To check the condition when the entry may have only 1 digit say "F23 5 4". Here we just have 				'4'. If this is the case set the remaining part as 'x' as default.*/
		{
			testD3 = "x";
			
		}


			
		
		if((chk_D == "LD") || (chk_D == "SD"))
		{

			if((testF1 != 'F') && (testF1 != 'f'))
			{
				alert("Please enter the Register name starting with 'F' or 'f'for Instruction no.-" +I+ ""+ "(LD instruction.)")
				return(false);
			}


			
			if ((testD1<0) || (testD1>31))
			{
				alert("Please enter the Register no. between 0 and 31 for Instruction no.-" +I+ ""+ "(LD instruction.)")
				return(false);
			}


			/*if ((chk_S < -99) && (chk_S>999))
			{
				alert("error")
				return(false);
			}
			
			
			var chkOK = "0123456789"
			var chkOK1 = "0123456789";
			var allValid = true;
			var ValidCounter = 0;*/

			
			
			/*ch1 = chk_S.charAt(ValidCounter);
			
			for (j = 0;  j < chkOK.length;  j++)
				{
					if ((testF2 == chkOK1.charAt(j)) || (testF2 == "+") || (testF2 == "-"))
					{
						//document.write("I am here")
						break;
					}

					if (j == chkOK.length)
					{
						allValid = false;
						document.write("I am here")
						break;
					}
				}
					

			
			for (i = 1;  i < chk_S.length;  i++)
			{
				ch = chk_S.charAt(i);
				for (j = 0;  j < chkOK.length;  j++)
				{
					
						if (ch == chkOK.charAt(j))
					    break;
					

					if (j == chkOK.length)
					{
						allValid = false;
						break;
					}
				}
				
			}*/


			/*if ((testD2<0) || (testD2>99))
			{
				allValid = false;
			}*/

			

			/*if (!allValid)
			{
				alert("Please enter the offset number between -99 and 999 for Instruction no.-" +I+ "(LD instruction)")
				return (false);
			}*/

			
			
			
			
			if ((testF3 != 'R') && (testF3 != 'r'))
			{
				alert("Please enter the Destination register name starting with 'R' or 'r'for Instruction no.-" +I+ "(LD instruction)")
				return(false);
			}

			if (!(testD3 > 0))
			{
				alert("Please enter the Destination register number greater than 0 for Instruction no.-" +I+ "(LD instruction)")
				return(false);
			}


		}


		if (testD1 == "")
			{
				alert("Please enter the Register no. in Instruction no.-" +I);
				return (false);
				
			}




		if((chk_D == "MULTD") || (chk_D == "DIVD") || (chk_D == "ADDD") || (chk_D == "SUBD"))
		{
			
			
			if(((testF1 != 'F') && (testF1 != 'f')) || ((testF2 != 'F') && (testF2 != 'f')) || ((testF3 != 'F') && (testF3 != 'f')))
			{
				alert("Please enter the Register name starting with 'F' or 'f'for Instruction no.-" +I)
				return(false);
			}


			

			if ((testD1<0) || (testD1>31) || (testD2<0) || (testD2>31) || (testD3<0) || (testD3>31))
			{
				alert("Please enter the Register no. between 0 and 31 for Instruction no.-" +I)
				return(false);
			}

		}

	}	



	var i = 0
	var check_value	
	var flag = 0
	var start=(4*(no_of_instr))+1
		for (i=start;i<40;i++) 
		{
			if(((i-1)%4) == 0)
			{
				check_value = form.elements[i].options[form.elements[i].selectedIndex].value;
			}
			else
			{
				check_value = form.elements[i].value
			}
			
			if (check_value != "")
			{
				flag = 1;
			}
		}
			if (flag) 
			{
				alert("Please enter only the given no. of instructions")
				return (false);
			}
			else
			{
				flag = 0;
				for (i=1;i<start;i++) 
				{
					if (form.elements[i].value == "")
					 flag = 1
				}
				if (flag) 
				{
					alert("Please Enter the instructions correctly")
					return (false);
				} 
				else 
				{
					return (true);
				}
			}




	
}


function reset_var(form) {
	counter = 0;
	clock = 1;
	parent.frames[2].location.href="output.htm";
}


/*---------------------------------------------------------------------------------------------------*/
/*							SCOREBOARDING ALGORITHM	FUNCTION										 */
/*---------------------------------------------------------------------------------------------------*/


function evaluate(form) {


	
	var temp = 0
	end_no = (4*no_of_instr)+1
	var str_temp;
	/* GET THE MIPS CODE FROM THE FORM */
	for (i=1;i<end_no;i=i+4)
	{
		j = ((i-1)/4)
	 	for (k=0;k<4;k++) 
	 	{
			temp = i+k;
			if (((temp-1) % 4)==0)
			{
				str_temp = form.elements[temp].options[form.elements[temp].selectedIndex].value;	
				instr[j][k]=str_temp;
			}
			else
			{
	 			instr[j][k] = form.elements[temp].value;
			}
	 	}
	} 

/*---------------------------------------------------------------------------------------------------*/
/*									INITIALIZE THE VARIABLES										 */
/*---------------------------------------------------------------------------------------------------*/
	for (i=0;i<max_no_instr;i++)
	{
		instr[i][status] = issue;
		instr[i][fu] = -1;
		instr[i][op_name] = "";
		instr[i][exec_cycle] = 0;
	}

	for (i=0;i<max_no_instr;i++)
	for (j=0;j<4;j++)
		instr_status[i][j] = 0;

	for (i=0;i<32;i++)
		reg_result2[i] = "";
	for (i=0;i<no_of_func;i++)
	{
		fu_status2[i][busy] = "No";
		fu_status2[i][op] = "";
		fu_status2[i][Fi] = "";
		fu_status2[i][Fj] = "";
		fu_status2[i][Fk] = "";
		fu_status2[i][Qj] = "";
		fu_status2[i][Qk] = "";
		fu_status2[i][Rj] = "";
		fu_status2[i][Rk] = "";
		
	}		
	fu_status2[mult1][fu_name]="mult1";
	fu_status2[mult2][fu_name]="mult2";
	fu_status2[add][fu_name]="add";
	fu_status2[divide][fu_name]="divide";
	fu_status2[integer][fu_name]="integer";

	/*fu_status2[mult1][exec]=10;
	fu_status2[mult2][exec]=10;
	fu_status2[add][exec]=2;
	fu_status2[divide][exec]=40;
	fu_status2[integer][exec]=1;*/



	fu_status2[mult1][exec]=form.execmultiply.value;
	fu_status2[mult2][exec]=form.execmultiply.value;
	fu_status2[add][exec]=form.execadd.value;
	fu_status2[divide][exec]=form.execdivide.value;
	fu_status2[integer][exec]=form.execinteger.value;


	update1();
	clock = 1;

/*-------------------------------------------------------------------------------------------------------------------------------*/
/*              			SCHEDULING THE INSTRUCTION USING SCOREBOARDING  				    							     */
/*-------------------------------------------------------------------------------------------------------------------------------*/


	/*Determine the operation that is to be performed for each instruction */

	for (i=0;i<no_of_instr;i++)
		operation(i);

	current_issue = -1;
	


	if (type_of_output == 1)
	{
		while (not_complete(no_of_instr))
		{
			upper_limit = current_issue + 1;
   			upper_limit = (upper_limit == no_of_instr)?(no_of_instr-1):upper_limit;
			update_flag = 0;
			for (i=0;i<=upper_limit;i++)
			{
				book_keeping(i);
				instr[i][status] = next_status[i];
			}
			if (update_flag)
			{
				update1();
				
			}
			clock = clock + 1;
		}
		print_out();
		if (!(not_complete(no_of_instr)))
		{
			alert("End of Program");
			counter = 0;
		}
	}

	
	if (type_of_output == 2)
	{
		
		flag = false;
		
		while (not_complete(no_of_instr) && !(flag))
		{
			upper_limit = current_issue + 1;
   			upper_limit = (upper_limit == no_of_instr)?(no_of_instr-1):upper_limit;
			update_flag = 0;
			for (i=0;i<=upper_limit;i++)
			{
				book_keeping(i);
				instr[i][status] = next_status[i];
			}
			if (update_flag)
			{
				update1();
				if (clock > counter)
				{
					flag = true;
					counter = clock;
				}
								
			}
			clock = clock + 1;
		}
		print_out();
		if (!(not_complete(no_of_instr)))
			alert("End of Program");
	}


	if (type_of_output == 3)
	{
		counter = req_clock;
		flag = false;
		
		while (not_complete(no_of_instr) && !(flag))
		{
			upper_limit = current_issue + 1;
   			upper_limit = (upper_limit == no_of_instr)?(no_of_instr-1):upper_limit;
			update_flag = 0;
			for (i=0;i<=upper_limit;i++)
			{
				book_keeping(i);
				instr[i][status] = next_status[i];
			}
			if (update_flag)
			{
				update1();					
			}
			if (clock == counter)
					flag = true;
			clock = clock + 1;
		}
		print_out();
		if (!(not_complete(no_of_instr)))
			alert("End of Program");
	}
}

/*-------------------------------------------------------------------------------*/
/*		BOOK KEEPING FUNCTION FOR INSTRUCTION (INSTR_NO)		 				 */
/*-------------------------------------------------------------------------------*/


function book_keeping(instr_no)
{
	var cond1,cond2,cond3,cond4,FU;
	var S1,S2,D,FI;
	var temp_flag,p,q;
	FU = instr[instr_no][fu];
	//document.write("The functional unit is "+FU+"<BR><BR>");




	D = instr[instr_no][des].slice(1,3);
	if ((instr[instr_no][oper]=="LD") || (instr[instr_no][oper]=="SD"))
	{
		S1 = 31;
		S2 = 31;
	}
	else
	{
		
		S1 = instr[instr_no][s1].slice(1,3);
		S2 = instr[instr_no][s2].slice(1,3);
		//document.write("S1 = "+S1+" and S2= "+S2+"<BR><BR>");
	}

	switch (instr[instr_no][status]) 
	{
		case 0:		if (FU == MULT)
						{
							for (p=mult1;p<=mult2;p++) // Foreach of the multiplication unit do the loop
							{
								cond1 = !(fu_status1[p][busy]=="Yes"); //checks if FU is not busy
								cond2 =  (reg_result1[D]=="");  //checks if the dest.reg.is not being written(RAW)
								if (cond1 && cond2) // If both these condition satisfy then update the scoreboard
								{
									fu_status2[p][busy] = "Yes";
									fu_status2[p][op] = "Mult";
									fu_status2[p][Fi] = instr[instr_no][des];
									fu_status2[p][Fj] = instr[instr_no][s1];
									fu_status2[p][Fk] = instr[instr_no][s2];
									fu_status2[p][Qj] = reg_result1[S1];
									fu_status2[p][Qk] = reg_result1[S2];

									if (fu_status2[p][Qj] == "")
										fu_status2[p][Rj] = "Yes";
									else
										fu_status2[p][Rj] = "No";

									if (fu_status2[p][Qk] == "")
										fu_status2[p][Rk] = "Yes";
									else
										fu_status2[p][Rk] = "No";
									reg_result2[D] = fu_status1[p][fu_name];
									next_status[instr_no] = readop;
									instr_status[instr_no][issue] = clock;
									current_issue = instr_no;
									instr[instr_no][fu] = p;
									update_flag = 1;
									break;
								}
								else
									next_status[instr_no] = issue;
							}
						}
						else
						{
							p = FU;
							cond1 = !(fu_status1[p][busy]=="Yes"); //checks if FU is not busy
							cond2 =  (reg_result1[D]=="");  //checks if the dest.reg.is not being written(RAW)
							if (cond1 && cond2) // If both these condition satisfy then update the scoreboard
							{
								fu_status2[p][busy] = "Yes";
								fu_status2[p][op] = instr[instr_no][op_name];
								fu_status2[p][Fi] = instr[instr_no][des];
								fu_status2[p][Fj] = instr[instr_no][s1];
								fu_status2[p][Fk] = instr[instr_no][s2];
								fu_status2[p][Qj] = reg_result1[S1];
								fu_status2[p][Qk] = reg_result1[S2];

								if (fu_status2[p][Qj] == "")
									fu_status2[p][Rj] = "Yes";
								else
									fu_status2[p][Rj] = "No";

								if (fu_status2[p][Qk] == "")
									fu_status2[p][Rk] = "Yes";
								else
									fu_status2[p][Rk] = "No";
									//document.write("The value of fu_status2[0][0] is "+fu_status2[0][0]+"<BR><BR>");
								reg_result2[D] = fu_status1[p][fu_name];
								//document.write("p= "+p+"<BR><BR>");
								//document.write("D="+D+" reg_result2[D]= "+reg_result2[D]+" <BR><BR>");
								next_status[instr_no] = readop;
								instr_status[instr_no][issue] = clock;
								current_issue = instr_no;
								update_flag = 1;
								break;
							}
							else
								next_status[instr_no] = issue;
						}
						break;

						
			
		case 1: 	if ((fu_status1[FU][Rj] == "Yes") && (fu_status1[FU][Rk]=="Yes"))
						{
							fu_status2[FU][Rj] = "No";
							fu_status2[FU][Rk] = "No";
							fu_status2[FU][Qj] = "";
							fu_status2[FU][Qk] = "";
							next_status[instr_no] = execute;
							instr_status[instr_no][readop] = clock;
							instr[instr_no][exec_cycle] = fu_status1[FU][exec];
							update_flag = 1;
						}
						else
							next_status[instr_no] = readop;
						break;
	
		case 2 : 	instr[instr_no][exec_cycle] -= 1; 
		       			if (instr[instr_no][exec_cycle] == 0) 
		       			{
		       				next_status[instr_no]=write_result;  // next state is write_result
		       				instr_status[instr_no][execute]=clock; // record the cycle when it finished execution
		       				update_flag = 1;
		       			}
		       			else
		       				next_status[instr_no]=execute; // else wait in execution state
		       			break; 
		      
		case 3 :		temp_flag = true;								
								for (p=0;p<5;p++)
								{
										cond1 = (fu_status1[p][Fj]!=fu_status1[FU][Fi]);	
										cond2 = (fu_status1[p][Rj]=="No");
										cond3 = (fu_status1[p][Fk] != fu_status1[FU][Fi]);
										cond4 = (fu_status1[p][Rk]=="No");
										if ((cond1 || cond2) && (cond3 || cond4))
											temp_flag = temp_flag;
										else
											temp_flag = false;
								}
								if (temp_flag) 
								{
									for (p=0;p<5;p++)
									{
										if (fu_status1[p][Qj] == fu_status1[FU][fu_name])
											fu_status2[p][Rj]="Yes";
										if (fu_status1[p][Qk]==fu_status1[FU][fu_name])
											fu_status2[p][Rk]="Yes";
									}
								
									FI = fu_status1[FU][Fi].slice(1,3);
									reg_result2[FI]="";
									fu_status2[FU][busy]="No";
									fu_status2[FU][op]="";
									fu_status2[FU][Fi]="";
									fu_status2[FU][Fj]="";
									fu_status2[FU][Fk]="";
									fu_status2[FU][Qj]="";
									fu_status2[FU][Qk]="";
									fu_status2[FU][Rj]="";
									fu_status2[FU][Rk]="";
									next_status[instr_no] = complete;
									instr_status[instr_no][write_result]=clock;
									update_flag = 1;
								}
								else
									next_status[instr_no] = write_result;
							break;
						
		case 4 : break;
	}

}


/*---------------------------------------------------------------------------------------------------------------------------*/
/*OPERATION FUNCTION: TAKES THE INSTRUCTION AND RETURNS THE FUNC. UNIT ASSOCIATED WITH IT ALONG WITH THE NAME OF OPERATION   */
/*---------------------------------------------------------------------------------------------------------------------------*/

function operation(i)
{
	if (instr[i][oper] == "LD")
	{
		instr[i][fu]=integer;
		instr[i][op_name]="Load";
	}
	if (instr[i][oper] == "SD")
	{
		instr[i][fu]=integer;
		instr[i][op_name]="Store";
	}
	if (instr[i][oper] == "MULTD")
	{
		instr[i][fu]=MULT;
		instr[i][op_name]="Mult";
	}
	if (instr[i][oper] == "DIVD")
	{
		instr[i][fu]=divide;
		instr[i][op_name]="Div";
	}
	if (instr[i][oper] == "ADDD")
	{
		instr[i][fu]=add;
		instr[i][op_name]="Add";
	}
	if (instr[i][oper] == "SUBD")
	{
		instr[i][fu]=add;
		instr[i][op_name]="Sub";
	}
}

/*-----------------------------------------------------------------------------*/
/* TO DETERMINE WHETHER ALL INSTRUCTIONS HAVE FINISHED WRITING THEIR RESULTS  */
/*----------------------------------------------------------------------------*/

function not_complete()
{
	var p,comp;
	comp = false;
	for (p=0;p<no_of_instr;p++)
	{
		if (instr[p][status] != complete)
			comp = true;
	}
	return comp;
}

/* Copies the values in fustatus2 to fustatus1 */
function update1()
{
	var p;
	for (p=0;p<5;p++)
	{
		fu_status1[p][busy]=fu_status2[p][busy];
		fu_status1[p][op]=fu_status2[p][op];
		fu_status1[p][Fi]=fu_status2[p][Fi];
		fu_status1[p][Fj]=fu_status2[p][Fj];
		fu_status1[p][Fk]=fu_status2[p][Fk];
		fu_status1[p][Qj]=fu_status2[p][Qj];
		fu_status1[p][Qk]=fu_status2[p][Qk];
		fu_status1[p][Rj]=fu_status2[p][Rj];
		fu_status1[p][Rk]=fu_status2[p][Rk];
		fu_status1[p][fu_name]=fu_status2[p][fu_name];
		fu_status1[p][exec] = fu_status2[p][exec];
	}
	for (p=0;p<32;p++)
		reg_result1[p]=reg_result2[p];
}



function print_out()
{
	var p,q,r;
	var realclock = clock-1;
	R = new Array(no_of_instr);
	Issue = new Array(no_of_instr);
	ReadOp = new Array(no_of_instr);
	Exec = new Array(no_of_instr);
	WriteResult = new Array(no_of_instr);

	FuncName = new Array(5);
	
	

	TheTop = "<html><head><title>Result</title></head><body bgcolor='#FFFFFF'><p align='center'><font size='4' color='#3366FF'><u><b>Instruction Status </b></u></font></p>"

	TheHeader = "<div align='center'><table border='1' cellspacing='0' width='100%' id='AutoNumber1' height='14' cellpadding='0' style='border-collapse: collapse'><tr><td width = '36%' height = '30'>&nbsp;</td><td width='16%' height='30' align='center'><b><font size='3' color='#990000'>Issue</font></b></td><td width='16%' height='30' align='center'><b><font size='3' color='#990000'>Read Op</font></b></td><td width='16%' height='30' align='center'><b><font size='3' color='#990000'>Exec</font></b></td><td width='16%' height='30' align='center'><b><font size='3' color='#990000'>Write Result</font></b></td></tr>"

	TheBottom = "</table></div>"

	parent.frames[2].document.write("<font size='3' color='#3366FF'><B>Clock Cycle No. <FONT  COLOR='#FF6600'>"+realclock+"</FONT></B></font>");
	parent.frames[2].document.write(TheTop);
	parent.frames[2].document.write(TheHeader);

	for (p=0;p<no_of_instr;p++)
	{
		
		R[p] = instr[p][oper]+"&nbsp; "+instr[p][des]+"&nbsp; "+instr[p][s1]+" &nbsp;"+instr[p][s2]+"&nbsp;  ";


	    Issue[p] = instr_status[p][issue];
		ReadOp[p] = instr_status[p][readop];
		Exec[p] = instr_status[p][execute];
		WriteResult[p] = instr_status[p][write_result];



		if (Issue[p] == realclock)
		{
			TheTable = "<tr><td width = '36%' height = '30' align='center'><b><font size='2'>" + R[p] + "</font></b></td><td width = '16%' height = '30' align='center'><b><font size='2' color='#FF6600'>" +  Issue[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + ReadOp[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + Exec[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + WriteResult[p] + "</font></b></td></tr>"
		}

		if (ReadOp[p] == realclock)
		{
			TheTable = "<tr><td width = '36%' height = '30' align='center'><b><font size='2'>" + R[p] + "</font></b></td><td width = '16%' height = '30' align='center'><b><font size='2'>" +  Issue[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2' color='#FF6600'>" + ReadOp[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + Exec[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + WriteResult[p] + "</font></b></td></tr>"
		}

		if (Exec[p] == realclock)
		{
			TheTable = "<tr><td width = '36%' height = '30' align='center'><b><font size='2'>" + R[p] + "</font></b></td><td width = '16%' height = '30' align='center'><b><font size='2'>" +  Issue[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + ReadOp[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2' color='#FF6600'>" + Exec[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + WriteResult[p] + "</font></b></td></tr>"
		}

		if (WriteResult[p] == realclock)
		{
			TheTable = "<tr><td width = '36%' height = '30' align='center'><b><font size='2'>" + R[p] + "</font></b></td><td width = '16%' height = '30' align='center'><b><font size='2'>" +  Issue[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + ReadOp[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + Exec[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2' color='#FF6600'>" + WriteResult[p] + "</font></b></td></tr>"
		}

		if ((Issue[p] != realclock) && (ReadOp[p] != realclock) && (Exec[p] != realclock) && (WriteResult[p] != realclock))
		{
			TheTable = "<tr><td width = '36%' height = '30' align='center'><b><font size='2'>" + R[p] + "</font></b></td><td width = '16%' height = '30' align='center'><b><font size='2'>" +  Issue[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + ReadOp[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + Exec[p] + "</font></b></td><td width='16%' height='30' align='center'><b><font size='2'>" + WriteResult[p] + "</font></b></td></tr>"
		}







		parent.frames[2].document.write(TheTable);

		

	
	}

	parent.frames[2].document.write(TheBottom);



	// TABLE 2 STARTS HERE**************************************************************************


	// For Table 2
	
	var i;
	color = new Array(5);
	Name1 = new Array(5);
	Busy1 = new Array(5);
	Op1 = new Array(5);
	Fi1 = new Array(5);
	Fj1 = new Array(5);
	Fk1 = new Array(5);
	Qj1 = new Array(5);
	Qk1 = new Array(5);
	Rj1 = new Array(5);
	Rk1 = new Array(5);

   	TheTop1 = "<p align='center'><font size='4' color='#3366FF'><u><b>Functional unit status </b></u></font></p>"

	TheHeader1 = "<div align='center'><table border='1' cellspacing='0' width='100%' id='AutoNumber2' height='14' cellpadding='0' style='border-collapse: collapse'><tr><td width = '10%' height = '43'>&nbsp;</td><td width = '10%' height = '43'>&nbsp;</td><td width = '10%' height = '43'>&nbsp;</td><td width='10%' height='43' align='center'><b><font size='3'>dest</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>S1</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>S2</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>FU</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>FU</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>Fj?</font></b></td><td width='10%' height='43' align='center'><b><font size='3'>Fk?</font></b></td></tr>"

	TheFixed1 = "<tr><td width = '10%' height = '43' align='center'><b><font size='3' color='#990000'>Func.Unit Name</font></b></td><td width = '10%' height = '43'align='center'><b><font size='3' color='#990000'>Busy</font></b></td><td width = '10%' height = '43'align='center'><b><font size='3' color='#990000'>Op</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Fi</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Fj</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Fk</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Qj</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Qk</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Rj</font></b></td><td width='10%' height='43' align='center'><b><font size='3' color='#990000'>Rk</font></b></td></tr>"

	TheBottom1 = "</table></div>"

	parent.frames[2].document.write(TheTop1);
	parent.frames[2].document.write(TheHeader1);
	parent.frames[2].document.write(TheFixed1);
	
	for (i=0;i<5;i++)
		color[i] = false;
	for (i=0;i<no_of_instr;i++)
	{
		
		if ((instr_status[i][issue] == realclock)||(instr_status[i][readop] == realclock)||(instr_status[i][write_result] == realclock))
		{	
						color[instr[i][fu]] = true;
		}
	}
	for (q=0;q<5;q++)
	{
		
		Name1[q] = fu_status1[q][fu_name];
		Busy1[q] = fu_status1[q][busy];
		Op1[q] = fu_status1[q][op];
		Fi1[q] = fu_status1[q][Fi];
		Fj1[q] = fu_status1[q][Fj];
		Fk1[q] = fu_status1[q][Fk];
		Qj1[q] = fu_status1[q][Qj];
		Qk1[q] = fu_status1[q][Qk];
		Rj1[q] = fu_status1[q][Rj];
		Rk1[q] = fu_status1[q][Rk];
		
					
		if (color[q])
		{
			TheTable1 = "<tr><td width = '10%' height = '30' align='center'><b><font size='2' color='#FF6600'>" +Name1[q]+ "</font></b></td><td width = '10%' height = '30'align='center'><b><font size='2' color='#FF6600'>" +Busy1[q]+ "</font></b></td><td width = '10%' height = '30'align='center'><b><font size='2' color='#FF6600'>" +Op1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Fi1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Fj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Fk1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Qj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Qk1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Rj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2' color='#FF6600'>" +Rk1[q]+ "</font></b></td></tr>"
		}

		else
		{
			TheTable1 = "<tr><td width = '10%' height = '30' align='center'><b><font size='2'>" +Name1[q]+ "</font></b></td><td width = '10%' height = '30'align='center'><b><font size='2'>" +Busy1[q]+ "</font></b></td><td width = '10%' height = '30'align='center'><b><font size='2'>" +Op1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Fi1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Fj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Fk1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Qj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Qk1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Rj1[q]+ "</font></b></td><td width='10%' height='30' align='center'><b><font size='2'>" +Rk1[q]+ "</font></b></td></tr>"
		}


		parent.frames[2].document.write(TheTable1);
		
		
	}     
	

	
	parent.frames[2].document.write(TheBottom1);



	
	
	// Third Table begins here ************************************************************
	
	
	
	RegResult = new Array(32);

	TheTop2 = "<p align='center'><font size='4' color='#3366FF'><u><b>Register result status </b></u></font></p>"

	TheHeader2 = "<div align='center'><table border='1' cellspacing='0' width='100%' id='AutoNumber1' height='14' cellpadding='0' style='border-collapse: collapse'>"

	TheBottom2 = "</table></body></html>"

	parent.frames[2].document.write(TheTop2);
	parent.frames[2].document.write(TheHeader2);
	parent.frames[2].document.write("<tr>");

	FUcounter = 0;
	var i;
	color1 = new Array(5);
	Dest = new Array(10);

	
	for (i=0;i<10;i++)
		Dest[i] = -1;

	for (i=0;i<32;i++)
		color1[i] = false;

	for (i=0;i<no_of_instr;i++)
	{
		
		if (instr_status[i][issue] == realclock)
		{	
						Dest[i] = instr[i][des].slice(1,3);
						
		}
	}

	for (i=0;i<10;i++)
	{
		if(Dest[i] > -1)
		{
			color1[Dest[i]] = true;
		}
	}

	

	for(r=0;r<32;r++)
	{
		RegResult[r] = reg_result1[r];
		if (RegResult[r] != "")
		{
			TheTable21 = "<td height = '30' align='center'><b><font size='2' color='#990000'>F" +r+ "</font></b></td>"
			parent.frames[2].document.write(TheTable21);
			
			FUcounter = FUcounter + 1;
		}
	}
	parent.frames[2].document.write("</tr><tr>");

	

	for(r=0;r<32;r++)
	{
		RegResult[r] = reg_result1[r];

		
			if ((RegResult[r] != "") && (color1[r] == true))
			{

				TheTable22 = "<td height = '30' align='center'><b><font size='2' color='#FF6600'>"  +RegResult[r]+ "</font></b></td>"
				parent.frames[2].document.write(TheTable22);	
			}
		
			if ((RegResult[r] != "") && (color1[r] == false))
			{
				TheTable22 = "<td height = '30' align='center'><b><font size='2'>"  +RegResult[r]+ "</font></b></td>"
				parent.frames[2].document.write(TheTable22);
			}

		
	}


	if (FUcounter == 0)
		{
			TheTable22 = "<td height = '30' align='center'><b><font size='2' color='#FF6600'>No Entries</font></b></td>"
			parent.frames[2].document.write(TheTable22);
		}

	parent.frames[2].document.write("</tr>");



	
	parent.frames[2].document.write(TheBottom2);
	parent.frames[2].document.close()
	
}



		</SCRIPT>
		<base target="main">
	</head>
	<body bgcolor=#D7E9FF>
	<a href="demo.htm" target= "top"><font size="4" align="center"> DEMO </font></a>&nbsp;&nbsp;
	<a href="help.htm" target= "top"><font size="4" align="center"> HELP </font></a>
		<form name="instruction">
			<b>Number of Instructions</b>:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="number" size="2" value="1" maxlength="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			<p><b>Enter Instructions Below:</b></p>
			<select size="1" name="D1">
				<option value="LD" selected>LD</option>
				<option value="SD">SD</option>
				<option value="MULTD">MULTD</option>
				<option value="DIVD">DIVD</option>
				<option value="ADDD">ADDD</option>
				<option value="SUBD">SUBD</option>
			</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R1" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
			<input type="text" name="S1" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T1" size="3" maxlength="3"></p>
			<p><select size="1" name="D2">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R2" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S2" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T2" size="3" maxlength="3"></p>
			<p><select size="1" name="D3">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R3" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S3" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T3" size="3" maxlength="3"></p>
			<p><select size="1" name="D4">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R4" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S4" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T4" size="3" maxlength="3"></p>
			<p><select size="1" name="D5">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R5" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S5" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T5" size="3" maxlength="3"></p>
			<p><select size="1" name="D6">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <input type="text" name="R6" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S6" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T6" size="3" maxlength="3"></p>
			<p><select size="1" name="D7">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <input type="text" name="R7" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S7" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T7" size="3" maxlength="3"></p>
			<p><select size="1" name="D8">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <input type="text" name="R8" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S8" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T8" size="3" maxlength="3"></p>
			<p><select size="1" name="D9">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="R9" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S9" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T9" size="3" maxlength="3"></p>
			<p><select size="1" name="D10">
					<option selected value = "">None</option>
					<option value="LD">LD</option>
					<option value="SD">SD</option>
					<option value="MULTD">MULTD</option>
					<option value="DIVD">DIVD</option>
					<option value="ADDD">ADDD</option>
					<option value="SUBD">SUBD</option>
				</select>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <input type="text" name="R10" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp;
				<input type="text" name="S10" size="3" maxlength="3">&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" name="T10" size="3" maxlength="3"></p>
			<p align="left">
				
				
				<b>Enter the number of execution cycles taken by the functional units:</b><BR>
				
				<table width="100%">
				<tr>
					<td width="40%">
						<B>Integer:</B>
					</td>
					<td width="10%">
						<input type ="text" name ="execinteger" value = "1" size="2" maxlength="3">
					</td>
					<td width="40%">
						<B>FP Add:</B>
					</td>
					<td width="10%">
						<input type ="text" name ="execadd" value = "2" size="2" maxlength="3">
					</td>
				</tr>

				<tr>
					<td width="40%">
						<B>FP Multiply:</B>
					</td>
					<td width="10%">
						<input type ="text" name ="execmultiply" value = "10" size="2" maxlength="3">
					</td>
					<td width="40%">
						<B>FP Divide:</B>
					</td>
					<td width="10%">
						<input type ="text" name ="execdivide" value = "40" size="2" maxlength="3">
					</td>
				</tr>
				
			</table>
<BR><BR>

				<b>Select the type of output required:</b><BR>
				<input type ="radio" name ="output" value = "end" checked><B>End Output </B><BR>
				<input type ="radio" name ="output" value = "step"><B>Step by Step Output</B><BR>
				<input type ="radio" name ="output" value = "clock"><B>Clock cycle No.=</B>
			    <input type ="text" name ="clock" size = "1">

				<BR><BR>

				<input type="button" value="Submit/Next" name="B1" onClick="if (validate(this.form)) evaluate(this.form);">&nbsp;&nbsp;&nbsp;
				<input type="reset" value="Reset" name="B2" onClick = reset_var(this.form)></p>
		</form>
	</body>
</html>
