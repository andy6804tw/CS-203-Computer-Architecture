<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"        "http://www.w3.org/TR/html4/loose.dtd"><html lang="en"><head>	<base >	<title>VLIW overview</title>	<link rel="stylesheet" href="../css/impressive.css" type="text/css"></head><body><table border="0" cellspacing="0" cellpadding="0" width="100%"><tr>	<!-- title block -->	<td colspan="3" class="title">		<h1>VLIW: Very Long Instruction Word</h1>		<h2>Overview</h2>	</td></tr><tr>	<!-- page content -->	<td class="content" width="65%">		<img src="../img/crusoe.jpg" align="right" width="150" height="118"><p>Very Long Instruction Word is a concept for processing technology that dates back to the early 1980s.  It places heavy emphasis on complex compiler software to achieve a high degree of parallelism (specifically, Instruction Level Parallelism, or <abbr title="Instruction Level Parallelism">ILP</abbr>).</p><p>The term <abbr title="Very Long Instruction Word">VLIW</abbr> refers to the size of each instruction that is carried out by a processor.  This instruction is "very long" in comparison to the instruction word size utilized by most current mainstream (superscalar) processors.  Most non-<abbr title="Very Long Instruction Word">VLIW</abbr> processors use complex hardware units to schedule processes in an overlapping fashion known as pipelining.  This process allows multiple operations to execute simultaneously, in a cascading fashion, to achieve the maximum utilization of processing power.  It is implemented at runtime, which has the result that the hardware is under pressure to accurately order instructions as they fly by.  Many techniques are used to predict the upcoming instructions for maximum efficiency in scheduling: what branches the code will take, what registers will be accessed next, what operations will be requested.  These algorithms are complicated and tend to bloat the processing hardware.  Since the scheduling has to be done on-the-fly, there is potential for time-wasting error.</p><p>Since <abbr title="Very Long Instruction Word">VLIW</abbr> code is ordered for the processor at compile time, this is all done before the code is ever actually executed.  As a <abbr title="Very Long Instruction Word">VLIW</abbr> compiler sorts through the code, it examines it to determine which instructions will be able to be executed simultaneously.  This is often done via a process called trace scheduling, which will be examined later.  It pairs these instructions up to form the lengthy instruction words the technology is named for.  The long instructions can be executed easily by the hardware, which in turn is made less complex by the structure of the bits being fed to it.  The hardware generally consists of identical multiple execution units, which lend themselves nicely to on-chip tiling.</p>	<!-- back/forward navigation -->		<table border="0" width="100%">			<tr>				<td align="left"><a href="default.htm">&#171; Previous</a></td>				<td align="right"><a href="history.html">Next &#187;</a></td>			</tr>		</table>	</td>	<td width="5%"><p>&nbsp;</p></td>	<!-- global navigation -->	<td class="globalnav" valign="top" width="30%">		<h2>Navigation</h2>		<ul>			<li><a href="../vliw.html">Introduction</a></li>			<li>All about VLIW				<ul>					<li><a href="default.htm">Description</a></li>					<li><a href="history.html">History</a></li>					<li><a href="difficulties.html">Difficulties of Implementation</a></li>				</ul>			</li>			<li>Implementations				<ul>					<li><a href="../2/crusoe1.html">Transmeta Crusoe overview</a></li>					<il><a href="../2/crusoe2.html">Crusoe and Code Morphing</a></li>					<li><a href="../2/ti1.html">Texas Instruments C6X</a></li>				</ul>			</li>			<li>Applications				<ul>					<li><a href="../3/applications.html">VLIW Applications Example</a></li>				</ul>			</li>			<li><a href="../references.html">References</a></li>		</ul>	</td></tr><tr><td colspan="3"><p>&nbsp;</p></td></tr></table></body></html>