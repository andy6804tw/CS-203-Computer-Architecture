<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://www-unix.oit.umass.edu/~sladiwal/compArch/demo.htm -->
<!-- saved from url=(0049)http://www-unix.ecs.umass.edu/~sladiwal/demo.html --><HTML><HEAD><TITLE>Dynamic Power Management</TITLE>
<SCRIPT src="wz_jsgraphics.js" type=text/javascript></SCRIPT>

<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
href="basic.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript>

<!--Begin Netscape Resize Script -->
<!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
// -->
<!--End Netscape Resize Script -->



			</SCRIPT>

<SCRIPT language=javascript id=clientEventHandlersJS>
<!--

//-->
			</SCRIPT>

<SCRIPT src="wz_jsgraphics.js" type=text/javascript></SCRIPT>

<STYLE type=text/css>.style1 {
	FONT-WEIGHT: bold; FONT-SIZE: smaller
}
.style2 {
	FONT-SIZE: x-small; FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif
}
.style3 {
	FONT-WEIGHT: bold; COLOR: #ffffff
}
</STYLE>

<META content="Microsoft FrontPage 5.0" name=GENERATOR></HEAD>
<BODY leftMargin=0 background=Home_tile.gif topMargin=0 
marginwidth="0" marginheight="0"><NOSCRIPT>
This page requires <A 
href="../../../../../browsers.netscape.com/browsers/main.tmpl">Netscape 4.0</A>, <A 
href="../../../../../www.microsoft.com/windows/ie/default.asp">Internet Explorer 4.0</A> 
or newer with JavaScript enabled.</NOSCRIPT>
<SCRIPT language=JavaScript>
//--------------------------------------------------------------------------------------------------------
//Script Starts here
//Variable Declaration
//array for disk models
var part=new Array(30000);
var part2=new Array(5000);
var sperm=new Array(30);
var IBM = new Array(0.75,3.48,0.51,1.08,6.97,52.5),Fujitsu = new Array(0.13,0.95,0.67,0.36,1.61,4.39),Other = new Array(0,0,0,0,0,0,0);
var disk;
var diskArr = new Array(6);
var buffer1 = new Array(3),buffer2 = new Array(3),buffer3 = new Array(3),buffer4 = new Array(3),buffer5 = new Array(3);
var startTrack;
var energyTracks; //energy used accessing all trackks
var trackNumbers=new Array(5);
for (i=0; i<5;i++)
trackNumbers[i]=new Array(4)
var Tbusy=new Array(10),Pbusy,Ttbusy;
var Tseek=new Array(10);

//Variables for Sameers DPM algorithms
var tsd,twu,esd,ewu,pw,ps;
var pinbet1=(esd/tsd)
var pinbet2=(ewu/twu);
var n=5;
var tbs;
var tbe;
var del=new Array(10);
var tactive=new Array(10);
var idle=new Array(10);
var sleep=new Array(10);
var wait=new Array(10);
var EG = new Array(10);
var thresh=new Array(10),threshavg;
var totalen,noofshutdown,noofws;

//To generate random Track Access Sequence
for (x=0;x<20000;x++)
part[x] = Math.round((1 + (599)*Math.random())*1)/1;  

//--------------------------------------------------------------------------------------------------------
//Redundantly used functions
function isEmpty(s)     { return ((s == null) || (s.length == 0)) }

function ascending(a,b) {return a-b;}

function descending(a,b) {return b-a;}

//--------------------------------------------------------------------------------------------------------
//Function to Autofill the form
function autofill() {
document.MyForm.TEXTA1.value="IBM";
document.MyForm.TEXTA2.value=1.13;
document.MyForm.TEXTA3.value=0.85;
document.MyForm.TEXTA4.value=0.77;
document.MyForm.TEXTA5.value=0.26;
document.MyForm.TEXTA6.value=0.61;
document.MyForm.TEXTA7.value=7.39;

document.MyForm.stLoc.value=1;
document.MyForm.time1.value=40;document.MyForm.time2.value=60;document.MyForm.time3.value=90;document.MyForm.time4.value=80;document.MyForm.time5.value=110;
document.MyForm.T11.value=220;document.MyForm.T12.value=520;document.MyForm.T13.value=220;document.MyForm.T14.value=120;
document.MyForm.T21.value=20; document.MyForm.T22.value=520;document.MyForm.T23.value=20;document.MyForm.T24.value=420;
document.MyForm.T31.value=520;document.MyForm.T32.value=320;document.MyForm.T33.value=320;document.MyForm.T34.value=520;
document.MyForm.T41.value=120;document.MyForm.T42.value=120;document.MyForm.T43.value=220;document.MyForm.T44.value=210;
document.MyForm.T51.value=210;document.MyForm.T52.value=210;document.MyForm.T53.value=210;document.MyForm.T54.value=140;
document.MyForm.timeout.value=30;document.MyForm.timeout1.value=30;document.MyForm.timeout2.value=30;document.MyForm.timeout3.value=30;document.MyForm.timeout4.value=30;
document.MyForm.Alpha1.value=1.5;document.MyForm.Beta1.value=0.5;document.MyForm.Roe1.value=0.1;document.MyForm.Roe2.value=0.1;
document.MyForm.tlongw.value=250;document.MyForm.tshortw.value=50;
}

//--------------------------------------------------------------------------------------------------------
//Dependeding on disk Index load the disk values
function diskValues(){
disk = document.MyForm.diskModel.selectedIndex;
switch(disk){
	case 0:
	diskArr = IBM;
	ps=diskArr[0];pw=diskArr[1];tsd=diskArr[2];esd=diskArr[3];twu=diskArr[4];ewu=diskArr[5];
	tbe=25;
	document.MyForm.TEXTA1.value="IBM";document.MyForm.TEXTA2.value=ps;document.MyForm.TEXTA3.value=pw;
	document.MyForm.TEXTA4.value=tsd;document.MyForm.TEXTA5.value=esd;document.MyForm.TEXTA6.value=twu;
	document.MyForm.TEXTA7.value=ewu;
	break;
	case 1:
	diskArr = Fujitsu;
	ps=diskArr[0],pw=diskArr[1],tsd=diskArr[2],esd=diskArr[3],twu=diskArr[4],ewu=diskArr[5];
	tbe=25;
	document.MyForm.TEXTA1.value="Fujitsu";document.MyForm.TEXTA2.value=ps;document.MyForm.TEXTA3.value=pw;
	document.MyForm.TEXTA4.value=tsd;document.MyForm.TEXTA5.value=esd;document.MyForm.TEXTA6.value=twu;
	document.MyForm.TEXTA7.value=ewu;
	break;
	case 2:
	diskArr = Other;
 	tbe=25;
	document.MyForm.TEXTA1.value="Other";
	break;
	}
}

//---------------------------------------------------------------------------------------------------------
//Function which calls the DPM Algorithm
function callPowerfnc(){
//Preset Delays
del[1]=document.MyForm.time1.value;
del[2]=document.MyForm.time2.value;
del[3]=document.MyForm.time3.value;
del[4]=document.MyForm.time4.value;
del[5]=document.MyForm.time5.value;
diskValues();
if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
var fnc = document.MyForm.SelectAlgorithm.selectedIndex;
switch(fnc){
	case 0:
	timeout();
	break;
	case 1:
	ato1();
	break;
	case 2:
	ato2();
	break;
	case 3:
	ato3();
	break;
	case 4:
	expoavg();
	break;
	case 5:
	timeout();
	ato1();
	ato2();
	ato3();
	expoavg();
	}
}

//------------------------------------------------------------------------------------------------------
//Function to determine Tactive
function computeActive() {
var x=0,rand=1;
tactive[9]=0;

for (x=0; x<4000;x++)
	{
	sperm[rand]=part2[x];
	if (rand == 20) {getActive();rand=0;tactive[9]+=tactive[6]} else rand++;
	}
}

//------------------------------------------------------------------------------------------------------
 //First Come First Serve Scheduling algorithm
 function fcfspart2(){
 computeValuespart2("fcfs",trackNumbers);
}

//-------------------------------------------------------------------------------------------------------
//Shortest Seek Time first
function sstfpart2() {
var allTracks = new Array(5);
for (i=0; i<5;i++)
allTracks[i]=new Array(4);

var start;
allTracks[0] = operateSSTF(startTrack,buffer1);
start = allTracks[0][allTracks[0].length - 1];
allTracks[1] = operateSSTF(start,buffer2);
start = allTracks[1][allTracks[1].length - 1];
allTracks[2] = operateSSTF(start,buffer3);
start = allTracks[2][allTracks[2].length - 1];
allTracks[3] = operateSSTF(start,buffer4);
start = allTracks[3][allTracks[3].length - 1];
allTracks[4] = operateSSTF(start,buffer5);
computeValuespart2("sstf",allTracks);
}

//--------------------------------------------------------------------------------------------------------
//Disk Scheduling algorithm C-LOOK
function scanpart2(){
var allTracks = new Array(5);
for (i=0; i<5;i++)
allTracks[i]=new Array(4);

var start;
allTracks[0] = operateSCAN(startTrack,buffer1);
start = allTracks[0][allTracks[0].length - 1];
allTracks[1] = operateSCAN(start,buffer2);
start = allTracks[1][allTracks[1].length - 1];
allTracks[2] = operateSCAN(start,buffer3);
start = allTracks[2][allTracks[2].length - 1];
allTracks[3] = operateSCAN(start,buffer4);
start = allTracks[3][allTracks[3].length - 1];
allTracks[4] = operateSCAN(start,buffer5);
computeValuespart2("scan",allTracks);
}

//--------------------------------------------------------------------------------------------------------
//Get Active for DPM
function getActive() {
var i1=tactive[8];
for(i=1;i<6;i++)
{
for(j=1;j<5;j++)
  	{
 	 var s = sperm[j];
 	 var test = eval(s);
	 trackNumbers[i-1][j-1] = test;
  	}
  }
  startTrack = document.MyForm.startLocation.value;
  separateArrays();
  if (i1==0) sstfpart2();
  if (i1==1) scanpart2();
  if (i1==2) fcfspart2();
}

//--------------------------------------------------------------------------------------------------------
//Function to compute various parameters of the Disk Scheduling algorithm
 function computeValuespart2(txt,arr)
 {
 diskValues();
 if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
 var c = 0;
 var diskaccess=0,et2=0;
 var myArr = new Array(20);

 for(i=0;i<arr.length;i++)
 	for(j=0;j<arr[0].length;j++)
 	{
 	myArr[c] = arr[i][j];
 	c++;
 	}
 var totalTracks = Math.abs(startTrack - myArr[0]);
 if(startTrack != myArr[0])
 diskaccess++;
 //Time for access = Seek Time + Rotation Time + Transfer Time + Controller Overhead
 for(j=1;j<myArr.length;j++)
 	{
 	totalTracks = totalTracks + Math.abs(myArr[j] - myArr[j-1]);
	et2=et2+Math.abs(myArr[j] - myArr[j-1]);
	if (Math.floor(j/4)==(j/4)) {Tseek[(j/4)] = 3.45 + 0.597 * Math.sqrt(et2);et2=0;}
	 if(myArr[j] != myArr[j-1])
 	diskaccess++;
 	}

tactive[6]=0;
for (x=1;x<=4;x++)
	{
	//assuming 7200 rpm disc with data transfer rate 64Kb/sec
	Tbusy[x]=Tseek[x]+4*4.17+4*1.5;
	tactive[6]+=Tbusy[x];
	}
}
//-------------------------------------------------------------------------------------------------------
//Timeout algorithm
function timeout () {
tbs=document.MyForm.timeout.value;
threshavg=tbs;

//for some strange reason it thinks tbs is a string
tbs++;
tbs=tbs-1;
var qwe,rty;

//To compute Active time of Algorithms
tactive[8]=document.MyForm.SeFunction.selectedIndex;
for (qwe=1;qwe<=5;qwe++)
{
for (rty=0;rty<4000;rty++)
	part2[rty]=part[rty+4000*(qwe-1)];
computeActive();
tactive[qwe]=Math.round((tactive[9]/1000)*100)/100;
}

//It assumes that if device is idle for a time greater than tbs seconds it will continue to be idle
for (x=1; x<=n; x++)
	{
	if (del[x]>tbs) idle[x]=(del[x]-tbs);
	else idle[x]=0;
	if (idle[x]!=0) sleep[x]=idle[x]-tsd;
	else sleep[x]=0;
	}

for (x=1;x<=n;x++)
	{
	thresh[x]=tbs;
	}
	
totalen=0;
noofshutdown=0;
noofws=0;
for (x=1;x<=n;x++)
	{
		if (idle[x]!=0)
		{
		EG[x]=pw*del[x]-pw*(thresh[x])-esd-ewu-ps*sleep[x];
		noofshutdown++;
		if (EG[x]<0) noofws++;
	    wait[x]=thresh[x];
	   }
		else EG[x]=0;
	totalen=totalen+pw*tactive[x]+pw*thresh[x]+esd+ewu+ps*sleep[x];
	}

	document.MyForm.nshutfixed.value = noofshutdown;
	document.MyForm.wshutfixed.value = noofws;
	document.MyForm.energyfixed.value = Math.round(totalen*100)/100;
	document.MyForm.ashutfixed.value = threshavg;
}

//------------------------------------------------------------------------------------------------------
//Adaptive Timeout Algorithm - 1 - Backoff Multiplicative +1.5s/Multiplicative -0.5s
function ato1 () {
var alpha=document.MyForm.Alpha1.value,
beta=document.MyForm.Beta1.value,
peta=document.MyForm.Roe1.value;
var x,ratio;
tbs=parseInt(document.MyForm.timeout1.value);
var start=1;
idle[0]=30;

//To compute Active time of Algorithms
tactive[8]=document.MyForm.SeFunction1.selectedIndex;
for (qwe=1;qwe<=5;qwe++)
{
for (rty=0;rty<4000;rty++)
	part2[rty]=part[rty+4000*(qwe-1)];
computeActive();
tactive[qwe]=Math.round((tactive[9]/1000)*100)/100;
}

//It assumes that if device is idle for a time greater than tbs seconds it will continue to be idle
for (x=1; x<=n; x++)
	{
	if (((tbs<=90) && (tbs>2)) || (start==1))
		{
		start=0;
		ratio=idle[x-1]/twu;
		if (ratio<=peta) tbs=(tbs+tbs*alpha);
		else tbs=tbs-tbs*beta;
		}
	thresh[x]=tbs;
	if (del[x]>tbs) idle[x]=del[x]-tbs;
	else idle[x]=0;
	if (idle[x]!=0) {if (idle[x]>(tsd+twu)) sleep[x]=idle[x]-tsd; else sleep[x]=0;}
	else sleep[x]=0;
	}

//Calculating average time before shutdown
threshavg=0;
for (x=1;x<=n;x++)
threshavg=thresh[x]+threshavg;
threshavg=threshavg/n;

totalen=0;
noofshutdown=0;
noofws=0;
for (x=1;x<=n;x++)
	{
		wait[x]=thresh[x];
		if (idle[x]!=0)
		{
		EG[x]=pw*del[x]-pw*thresh[x]-esd-ewu-ps*sleep[x];
		noofshutdown++;
		if (EG[x]<0) noofws++;
		}
		else EG[x]=0;
	totalen=totalen+pw*tactive[x]+pw*thresh[x]+esd+ewu+ps*sleep[x];
	}
	document.MyForm.nshutfixed1.value = noofshutdown;
	document.MyForm.wshutfixed1.value = noofws;
	document.MyForm.energyfixed1.value = Math.round(totalen*100)/100;
	document.MyForm.ashutfixed1.value = threshavg;
}

//------------------------------------------------------------------------------------------------------
//Adaptive Timeout Algorithm - 2 - Backoff using Arith +10% Threshold/Arith -5% Threshold
function ato2 () {
tbs=document.MyForm.timeout2.value;
var alpha=(0.1*tbs),beta=(0.05*tbs),peta=document.MyForm.Roe2.value;
var x,ratio;
var start=1;
idle[0]=30;

//To compute Active time of Algorithms
tactive[8]=document.MyForm.SeFunction2.selectedIndex;
for (qwe=1;qwe<=5;qwe++)
{
for (rty=0;rty<4000;rty++)
	part2[rty]=part[rty+4000*(qwe-1)];
computeActive();
tactive[qwe]=Math.round((tactive[9]/1000)*100)/100;
}

//It assumes that if device is idle for a time greater than tbs seconds it will continue to be idle
for (x=1; x<=n; x++)
	{
	if (((tbs<=90) && (tbs>2)) || (start==1))
		{
		start=0;
		ratio=idle[x-1]/twu;
		if (ratio<=peta) parseInt(tbs=tbs+alpha);
		else tbs=tbs-beta;
		}
	thresh[x]=tbs;
	if (del[x]>tbs) idle[x]=del[x]-tbs;
	else idle[x]=0;
	if (idle[x]!=0) {if (idle[x]>(tsd+twu)) sleep[x]=idle[x]-tsd; else sleep[x]=0;}
	else sleep[x]=0;
	}

//Calculating average time before shutdown
threshavg=0;
for (x=1;x<=n;x++)
threshavg+=thresh[x];
threshavg=threshavg/n;

totalen=0;
noofshutdown=0;
noofws=0;
for (x=1;x<=n;x++)
	{
		wait[x]=0;
		if (idle[x]!=0)
		{
		EG[x]=pw*del[x]-pw*(tbs)-esd-ewu-ps*sleep[x];
		noofshutdown++;
		if (EG[x]<0) noofws++;
		if (idle[x]<=(tsd+twu+sleep[x])) wait[x]=tsd+twu+sleep[x]-idle[x];
		}
		else EG[x]=0;
	totalen=totalen+pw*tactive[x]+pw*thresh[x]+esd+ewu+ps*sleep[x];
	}
	document.MyForm.nshutfixed2.value = noofshutdown;
	document.MyForm.wshutfixed2.value = noofws;
	document.MyForm.energyfixed2.value = Math.round(totalen*100)/100;
	document.MyForm.ashutfixed2.value = threshavg;
}


//-----------------------------------------------------------------------------------------------------
//This program will simulate the operation of Adaptive Timeout Algorithm 3 - uses busy time to compute
//the threshold value
function ato3() {
var Pbusy;
tbs=parseFloat(document.MyForm.timeout3.value);

var x1,x,trtbusy=32;
//To compute Active time of Algorithms
tactive[8]=document.MyForm.SeFunction3.selectedIndex;
for (qwe=1;qwe<=5;qwe++)
{
for (rty=0;rty<4000;rty++)
	part2[rty]=part[rty+4000*(qwe-1)];
computeActive();
tactive[qwe]=Math.round((tactive[9]/1000)*100)/100;
}

for (x=1;x<=n;x++)
	{
	x1=tactive[x];
	while (x1>0)
		{
		x1=x1-5;
		if (x1> trtbusy) tbs=tbs+2;
		else tbs=tbs-0.5;
		}
	
	thresh[x]=tbs;
	if (del[x]>tbs) idle[x]=del[x]-tbs;
	else idle[x]=0;
	if (idle[x]!=0) {if (idle[x]>(tsd+twu)) sleep[x]=idle[x]-tsd; else sleep[x]=0;}
	else sleep[x]=0;
	}


//Calculating average time before shutdown
threshavg=0;
for (x=1;x<=n;x++)
threshavg+=thresh[x];
threshavg=threshavg/n;

totalen=0;
noofshutdown=0;
noofws=0;
for (x=1;x<=n;x++)
	{
		wait[x]=thresh[x];
		if (idle[x]!=0)
		{
		EG[x]=pw*del[x]-pw*(thresh[x])-esd-ewu-ps*sleep[x];
		noofshutdown++;
		if (EG[x]<0) noofws++;
		}
		else EG[x]=0;
	totalen=totalen+pw*tactive[x]+pw*thresh[x]+esd+ewu+ps*sleep[x];
	}
	document.MyForm.nshutfixed3.value = noofshutdown;
	document.MyForm.wshutfixed3.value = noofws;
	document.MyForm.energyfixed3.value = Math.round(totalen*100)/100;
	document.MyForm.ashutfixed3.value = threshavg;
}


//-----------------------------------------------------------------------------------------------------
//This program will simulate the operation of the exponential average algorithm
function expoavg() {
// Variable Declaration
var x,x1;
var a =0.5;
var c=2;
var tbs=document.MyForm.timeout4.value;

//To compute Active time of Algorithms
tactive[8]=document.MyForm.SeFunction4.selectedIndex;
for (qwe=1;qwe<=5;qwe++)
{
for (rty=0;rty<4000;rty++)
	part2[rty]=part[rty+4000*(qwe-1)];
computeActive();
tactive[qwe]=Math.round((tactive[9]/1000)*100)/100;
}

//Setting the threshold value sth
var sth=0.1;

//Initial estimations of Idle period
del[0]=del[1];
if ((del[0]-tbs)>0) idle[0]=(del[0]-tbs); else idle[0]=0;

//Estimation of Idle Period I[x+1] based on previous estimations and delay periods
for (x=0;x<n;x++)
	{
	x1=del[x+1];
	//This condition is introduced to cope with incorrect estimates of idle periods when the delay time is
	//less than threshold.
	if (x1<sth) idle[x+1]=0; else idle[x+1]=a*del[x]+(1-a)*idle[x];
	//This condition is introduced to correct prediction misses due to a short delay period followed by a
	//very long one.s
	while (x1>=sth)
		{
		//We add this condition to correct prediction in the case where a short delay period follows a
		//very long one
		if ((a*(del[x+1]-x1)+(1-a)*idle[x])>=(c*idle[x]) && (idle[x]!=0))
		idle[x+1]=c*idle[x];
		else
		idle[x+1]=a*(del[x+1]-x1)+(1-a)*idle[x];
		x1=x1-sth;
		}
	if (idle[x+1]<tbe) idle[x+1]=0;
	thresh[x+1]=del[x+1]-idle[x+1];
	if (idle[x+1]!=0) {if (idle[x+1]>(tsd+twu)) sleep[x+1]=idle[x+1]-tsd; else sleep[x+1]=0;}
	else sleep[x+1]=0;
	}

//Calculating average time before shutdown
threshavg=0;
for (x=1;x<=n;x++)
threshavg+=thresh[x];
threshavg=threshavg/n;

//Calculating the Energy Gain
totalen=0;
noofshutdown=0;
noofws=0;
for (x=1;x<=n;x++)
	{
		wait[x]=thresh[x];
		if (idle[x]!=0)
		{
		EG[x]=pw*del[x]-pw*(thresh[x])-esd-ewu-ps*sleep[x];
		noofshutdown++;
		if (EG[x]<0) noofws++;
		}
		else EG[x]=0;
	totalen=totalen+pw*tactive[x]+pw*thresh[x]+esd+ewu+ps*sleep[x];
	}
	document.MyForm.nshutfixed4.value = noofshutdown;
	document.MyForm.wshutfixed4.value = noofws;
	document.MyForm.energyfixed4.value = Math.round(totalen*100)/100;
	document.MyForm.ashutfixed4.value = threshavg;
}


//---------------------------------------------------------------------------------------------------------
//Function which selects scheduling algorithm based on Index selected
function callFun() {
sstf();
scan();
fcfs();
}

 //--------------------------------------------------------------------------------------------------------
 //First Come First Serve Scheduling algorithm
 function fcfs(){
 document.MyForm.Textarea3.value="";
 inputValues();
 document.MyForm.startfcfs.value = startTrack;
  for(i=0;i<5;i++) {
 	 for(j=0;j<4;j++)
	 {
 	 if(i==4 && j==3)
  	document.MyForm.Textarea3.value += trackNumbers[i][j];
 	 else
 	 document.MyForm.Textarea3.value += trackNumbers[i][j]  + "," ;
  	 }
  }
  computeValues("fcfs",trackNumbers);
}

//-------------------------------------------------------------------------------------------------------
//Shortest Seek Time first
function sstf() {
var allTracks = new Array(5);
for (i=0; i<5;i++)
allTracks[i]=new Array(4);

inputValues();
var start;
document.MyForm.startsstf.value = startTrack;
separateArrays();

allTracks[0] = operateSSTF(startTrack,buffer1);

start = allTracks[0][allTracks[0].length - 1];
allTracks[1] = operateSSTF(start,buffer2);

start = allTracks[1][allTracks[1].length - 1];
allTracks[2] = operateSSTF(start,buffer3);

start = allTracks[2][allTracks[2].length - 1];
allTracks[3] = operateSSTF(start,buffer4);

start = allTracks[3][allTracks[3].length - 1];
allTracks[4] = operateSSTF(start,buffer5);
document.MyForm.Textarea1.value = allTracks[0] + "," + allTracks[1] + "," + allTracks[2]  + "," + allTracks[3] + "," + allTracks[4];

computeValues("sstf",allTracks);
}

//--------------------------------------------------------------------------------------------------------
//Disk Scheduling algorithm C-LOOK
function scan(){
var allTracks = new Array(5);
for (i=0; i<5;i++)
allTracks[i]=new Array(4);

inputValues();
var start;
document.MyForm.startscan.value = startTrack;
separateArrays();

allTracks[0] = operateSCAN(startTrack,buffer1);

start = allTracks[0][allTracks[0].length - 1];
allTracks[1] = operateSCAN(start,buffer2);

start = allTracks[1][allTracks[1].length - 1];
allTracks[2] = operateSCAN(start,buffer3);

start = allTracks[2][allTracks[2].length - 1];
allTracks[3] = operateSCAN(start,buffer4);

start = allTracks[3][allTracks[3].length - 1];
allTracks[4] = operateSCAN(start,buffer5);
document.MyForm.Textarea2.value = allTracks[0] + "," + allTracks[1] + "," + allTracks[2]  + "," + allTracks[3] + "," + allTracks[4];
computeValues("scan",allTracks);
}

//------------------------------------------------------------------------------------------------------
//function to input tracknos
 function inputValues(){
  for(i=1;i<6;i++)
  {
  	for(j=1;j<5;j++)
  	{
 	 var s = "document.MyForm.T" + i + j + ".value";
 	 var test = eval(s);
	 trackNumbers[i-1][j-1] = test;
  	}
  }
  startTrack = document.MyForm.startLocation.value;
  }

//---------------------------------------------------------------------------------------------------------
//Loading Buffers with the user specified tracks
function separateArrays(){
	buffer1 = trackNumbers[0];
	buffer2 = trackNumbers[1];
	buffer3 = trackNumbers[2];
	buffer4 = trackNumbers[3];
	buffer5 = trackNumbers[4];
 }

//--------------------------------------------------------------------------------------------------------
//Function to compute various parameters of the Disk Scheduling algorithm
 function computeValues(txt,arr)
 {
 diskValues();
 if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
 var c = 0;
 var diskaccess=0,et2=0;
 //var idleTime = eval(parseFloat(document.MyForm.time1.value) + parseFloat(document.MyForm.time2.value) + parseFloat(document.MyForm.time3.value) + parseFloat(document.MyForm.time4.value) + parseFloat(document.MyForm.time5.value));
 var myArr = new Array(20);

 for(i=0;i<arr.length;i++)
 	for(j=0;j<arr[0].length;j++)
 	{
 	myArr[c] = arr[i][j];
 	c++;
 	}
 var totalTracks = Math.abs(startTrack - myArr[0]);
 if(startTrack != myArr[0])
 diskaccess++;
 //Time for access = Seek Time + Rotation Time + Transfer Time + Controller Overhead
 for(j=1;j<myArr.length;j++)
 	{
 	totalTracks = totalTracks + Math.abs(myArr[j] - myArr[j-1]);
	et2=et2+Math.abs(myArr[j] - myArr[j-1]);
	if (Math.floor(j/4)==(j/4)) {Tseek[(j/4)] = 3.45 + 0.597 * Math.sqrt(et2);et2=0;}
	 if(myArr[j] != myArr[j-1])
 	diskaccess++;
 	}

tactive[6]=0;
for (x=1;x<=4;x++)
{
//assuming 7200 rpm disc with data transfer rate 64Kb/sec
Tbusy[x]=Tseek[x]+4*4.17+4*1.5;
tactive[6]+=Tbusy[x];
}

 energyTracks = eval((0.75 + (0.25 * Math.sqrt(totalTracks)) )* parseFloat(diskArr[1]));
 if(txt == "sstf")
 	{
 	document.MyForm.ttracksSSTF.value = totalTracks;
 	document.MyForm.tdisksSSTF.value = diskaccess;
 	
	var temp = tactive[6]*pw;
	document.MyForm.energySSTF.value = Math.round(temp * 100)/100;
 	
 	var val = eval(parseFloat(totalTracks)/parseFloat(diskaccess));
 	document.MyForm.alengthSSTF.value = Math.round(val * 100)/100;
	}
 if(txt=="scan")
 	{
 document.MyForm.ttracksSCAN.value = totalTracks;
 document.MyForm.tdisksSCAN.value = diskaccess;
 var temp = tactive[6]*pw;
 document.MyForm.energySCAN.value = Math.round(temp * 100)/100;
 var val = eval(parseFloat(totalTracks)/parseFloat(diskaccess));
 document.MyForm.alengthSCAN.value = Math.round(val * 100)/100;
 	}
 if(txt=="fcfs")
 	{
 	document.MyForm.ttracksFCFS.value = totalTracks;
 document.MyForm.tdisksFCFS.value = diskaccess;
 var temp = tactive[6]*pw;
 document.MyForm.energyFCFS.value = Math.round(temp * 100)/100;
 var val = eval(parseFloat(totalTracks)/parseFloat(diskaccess));
 document.MyForm.alengthCSCAN.value = Math.round(val * 100)/100;
 	}
 }

//-------------------------------------------------------------------------------------------------------
//Function to compute minimum distance between two consecutive tracks
function minDistance(start,arr){
	var min = 1000;
	var element;
	for(i=0;i<arr.length;i++){
		temp = Math.abs(start - arr[i]);
		if (  temp < min)
		{
			min = temp;
			element = arr[i];
		}
	}
	return element;
}

//--------------------------------------------------------------------------------------------------------
//Performance Metrics for the algorithms
function perm() {
if (document.MyForm.D3.selectedIndex==0) {allperm();}
var sprob=0,alg1=0,alg2=0,x20,alg3=0;

alg1=document.MyForm.D1.selectedIndex;
alg2=document.MyForm.D2.selectedIndex;
if (alg1!=alg2) alg3=1; else {alert("The two algorithms selected should be different"); window.location.reload( false );}

//Variables to be used 
var tactive123=new Array(10);
var idle123=new Array(10);
var sleep123=new Array(10);
var wait123=new Array(10);
var EG123= new Array(10);
var thresh123=new Array(10);
var last123=0;

//Preset Delays
del[1]=document.MyForm.time1.value;
del[2]=document.MyForm.time2.value;
del[3]=document.MyForm.time3.value;
del[4]=document.MyForm.time4.value;
del[5]=document.MyForm.time5.value;
diskValues();
if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
switch(alg1){
	case 0:
	timeout();
	break;
	case 1:
	ato1();
	break;
	case 2:
	ato2();
	break;
	case 3:
	ato3();
	break;
	case 4:
	expoavg();
	break;
	}
for (x=1;x<=n;x++)
{
tactive123[x]=tactive[x];
idle123[x]=idle[x];
sleep123[x]=sleep[x];
wait123[x]=wait[x];
EG123[x]=EG[x];
thresh123[x]=thresh[x];
}

//Preset Delays
del[1]=document.MyForm.time1.value;
del[2]=document.MyForm.time2.value;
del[3]=document.MyForm.time3.value;
del[4]=document.MyForm.time4.value;
del[5]=document.MyForm.time5.value;
diskValues();
if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
switch(alg2){
	case 0:
	timeout();
	break;
	case 1:
	ato1();
	break;
	case 2:
	ato2();
	break;
	case 3:
	ato3();
	break;
	case 4:
	expoavg();
	break;
	}	

var tlongw=document.MyForm.tlongw.value;
var tshortw=document.MyForm.tshortw.value;
if (tlongw==0 || tshortw==0)
	{
	alert("Please enter window sizes");
    window.location.reload( false );
	}
	
var jg_doc = new jsGraphics();
var last=10;
document.writeln("");

var tsd1=new Array(10);
var twu1=new Array(10);
var tsd123=new Array(10);
var twu123=new Array(10);
var totaltime=new Array(10);
var totaltime=new Array(10);
var basetime=new Array(10);
var totaltime123=new Array(10);
//Modified for two algorithms
for (x=1;x<=n;x++)
{
if (sleep[x]==0) tsd1[x]=0; else tsd1[x]=tsd;
if (sleep123[x]==0) tsd123[x]=0; else tsd123[x]=tsd;
if (sleep[x]==0) twu1[x]=0; else twu1[x]=twu;
if (sleep123[x]==0) twu123[x]=0; else twu123[x]=twu;
totaltime[x]=parseInt(tactive[x]-thresh[x]+2*thresh[x]+tsd1[x]+sleep[x]+twu1[x]);
basetime[x]=parseInt(tactive[x]+parseInt(del[x]));
totaltime123[x]=parseInt(tactive123[x]-thresh123[x]+2*thresh123[x]+tsd123[x]+sleep123[x]+twu123[x]);
}

//for the 1st algorithm
last123=40;
jg_doc.setFont("arial", "12px", Font.BOLD);
if (alg1==0) jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last123);
if (alg1==1) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last123);
if (alg1==2) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last123);
if (alg1==3) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last123);
if (alg1==4) jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last123);
last123+=30;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive123[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last, last123+10); 
last=last+2*tactive123[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh123[x],last123);
last+=2*thresh123[x];
jg_doc.setColor("yellow");
if (tsd123[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd123[x],last123);
last+=2*tsd123[x];
jg_doc.setColor("green"); 
if (sleep123[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep123[x],last123);
last+=2*sleep123[x];
jg_doc.setColor("pink"); 
if (twu123[x]!=0) jg_doc.drawLine(last,last123,last+2*twu123[x],last123);
last+=2*twu123[x];
}

last123+=35;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "12px", Font.BOLD);
if (alg2==0) jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last123);
if (alg2==1) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last123);
if (alg2==2) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last123);
if (alg2==3) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last123);
if (alg2==4) jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last123);
last123+=30;
last=10;
//for the 2nd algorithm
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last,last123+10); 
last=last+2*tactive[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh[x],last123);
last+=2*thresh[x];
jg_doc.setColor("yellow");
if (tsd1[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd1[x],last123);
last+=2*tsd1[x];
jg_doc.setColor("green"); 
if (sleep[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep[x],last123);
last+=2*sleep[x];
jg_doc.setColor("pink"); 
if (twu1[x]!=0) jg_doc.drawLine(last,last123,last+2*twu1[x],last123);
last+=2*twu1[x];
}

last1=last123+40;
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(10,last1,last+20,last1);
jg_doc.drawString(">", last+20,last1-10); 

for (x=10;x<=last;x=x+200)
{
jg_doc.drawLine(x,last1-5,x,last1+5);
jg_doc.drawString((x-10)/2, x,last1+10); 
}
last1+=30;
jg_doc.drawString("time (in seconds) --->", last/2,last1); 

last1=last123+90;
jg_doc.setColor("black"); 
jg_doc.drawString("Legend", 10, last1); 
last1+=30;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Active Time",50,last1-5);
jg_doc.setColor("red");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Wait time",50,last1-5);
jg_doc.setColor("yellow");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Shutdown time",50,last1-5);
jg_doc.setColor("green");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Sleep Time",50,last1-5);
jg_doc.setColor("pink");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Time to Wake Up",50,last1-5);

//for the 1st algorithm
jg_doc.setStroke(1);
jg_doc.setColor("black");
jg_doc.drawRect(10,last1+20,1200,30);
jg_doc.drawRect(10,last1+50,1200,30);
jg_doc.drawRect(10,last1+80,1200,30);
jg_doc.drawRect(10,last1+110,1200,30);
jg_doc.drawRect(10,last1+140,1200,30);
jg_doc.drawRect(10,last1+170,1200,30);
jg_doc.drawRect(10,last1+200,1200,30);
last1+=50;
jg_doc.drawLine(110,last1,110,last1+180);
jg_doc.drawLine(210,last1,210,last1+180);
jg_doc.drawLine(310,last1,310,last1+180);
jg_doc.drawLine(410,last1,410,last1+180);
jg_doc.drawLine(510,last1,510,last1+180);
jg_doc.drawLine(610,last1,610,last1+180);
jg_doc.drawLine(710,last1,710,last1+180);
jg_doc.drawLine(810,last1,810,last1+180);
jg_doc.drawLine(910,last1,910,last1+180);
jg_doc.drawLine(1010,last1,1010,last1+180);
jg_doc.drawLine(1110,last1,1110,last1+180);
jg_doc.drawLine(1210,last1,1210,last1+180);

jg_doc.setFont("arial", "15px", Font.BOLD); 
if (alg1==0) jg_doc.drawString("FIXED TIMEOUT ALGORITHM",20,last1-30);
if (alg1==1) jg_doc.drawString("ADAPTIVE TIMEOUT 1 ALGORITHM",20,last1-30);
if (alg1==2) jg_doc.drawString("ADAPTIVE TIMEOUT 2 ALGORITHM",20,last1-30);
if (alg1==3) jg_doc.drawString("ADAPTIVE TIMEOUT 3 ALGORITHM",20,last1-30);
if (alg1==4) jg_doc.drawString("EXPONENTIAL AVERAGE ALGORITHM",20,last1-30);
jg_doc.setColor("blue");
if (alg2==0) jg_doc.drawString("../../../../ FIXED TIMEOUT ALGORITHM",290,last1-30);
if (alg2==1) jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 1 ALGORITHM",290,last1-30);
if (alg2==2) jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 2 ALGORITHM",290,last1-30);
if (alg2==3) jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 3 ALGORITHM",290,last1-30);
if (alg2==4) jg_doc.drawString("../../../../ EXPONENTIAL AVERAGE ALGORITHM",290,last1-30);

jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("Cycle Number",20,last1+10);
jg_doc.drawString("Tactive",120,last1+10);
jg_doc.drawString("Wait time",320,last1+10);
jg_doc.drawString("Tsleep",520,last1+10);
jg_doc.drawString("Power Gained",720,last1+10);
jg_doc.drawString("Total Time",920,last1+10);
jg_doc.setFont("font-family", "size+unit", Font.BOLD);
jg_doc.drawString("THE CHART BELOW SHOWS YOU THE PERFORMANCE OF THE ALGORITHMS",10,10);
jg_doc.setColor("blue");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("Tactive",220,last1+10);
jg_doc.drawString("Wait time",420,last1+10);
jg_doc.drawString("Tsleep",620,last1+10);
jg_doc.drawString("Power Gained",820,last1+10);
jg_doc.drawString("Total Time",1020,last1+10);
jg_doc.setColor("black");
jg_doc.drawString("Base Time",1120,last1+10);


last1+=10;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("Cycle"+x,20,last1+30*x);
jg_doc.drawString(Math.round(tactive123[x]* 100)/100,120,last1+30*x);
jg_doc.drawString(Math.round(thresh123[x]* 100)/100,320,last1+30*x);
jg_doc.drawString(Math.round(sleep123[x]* 100)/100,520,last1+30*x);
jg_doc.drawString(Math.round(EG123[x]* 100)/100,720,last1+30*x);
jg_doc.drawString(Math.round(totaltime123[x]* 100)/100,920,last1+30*x);
jg_doc.setColor("blue");
jg_doc.drawString(Math.round(tactive[x]* 100)/100,220,last1+30*x)
jg_doc.drawString(Math.round(thresh[x]* 100)/100,420,last1+30*x);
jg_doc.drawString(Math.round(sleep[x]* 100)/100,620,last1+30*x);
jg_doc.drawString(Math.round(EG[x]* 100)/100,820,last1+30*x);
jg_doc.drawString(Math.round(totaltime[x]* 100)/100,1020,last1+30*x);
jg_doc.setColor("black");
jg_doc.drawString(Math.round(basetime[x]* 100)/100,1120,last1+30*x);
}

last1+=550;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "15px", Font.BOLD);
jg_doc.drawString("The Graph of the Max. Wait time in the Window VS. The Window size is shown below",20,last1-350);
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(250,last1,650,last1);
jg_doc.drawLine(250,last1,250,last1-300);

//Calculating Long Waiting Period for algorithm 1
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive[count];x1++)
			{
			timewait[x]=0;x++;
			}
		for (x1=1;x1<=thresh[count];x1++)
			{
			timewait[x]=1;x++;
			}
		for (x1=1;x1<=(tsd1[count]+twu1[count]+sleep[count]);x1++)
			{
			timewait[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin[7]=maximum;

//Calculating Long Waiting Period for algorithm 2
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait123=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive123[count];x1++)
			{
			timewait123[x]=0;x++;
			}
		for (x1=1;x1<=thresh123[count];x1++)
			{
			timewait123[x]=1;x++;
			}
		for (x1=1;x1<=(tsd123[count]+twu123[count]+sleep123[count]);x1++)
			{
			timewait123[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin123=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait123[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin123[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait123[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin123[7]=maximum;


//which waitwin is larger
var imdb;
if (waitwin[6]>waitwin123[6]) imdb=waitwin[6]; else imdb=waitwin123[6];

//X SCALE
var x1=30;
for (x=250;x<=650;x+=80)
	{
	jg_doc.drawLine(x,last1-5,x,last1+5);
	jg_doc.drawString(x1, x,last1+10); 
	x1+=30;
	}
//Y SACALE
var x1=0;
for (x=last1;x>=last1-300;x-=60)
	{
	jg_doc.drawLine(245,x,255,x);
	jg_doc.drawString(x1, 230,x); 
	x1+=Math.round((imdb/5)*1)/1;
	}
jg_doc.setFont("arial", "15px", Font.Italic);
jg_doc.drawString("Window Size(in seconds) --->", 295,last1+30); 
jg_doc.drawImage("img2.bmp", 185,last1-250,32,220); 

for (x=1;x<=6;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin123[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("blue");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin[x]/Math.round((imdb/5)*1)/1))
}

jg_doc.setColor("black");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin123[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("blue");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+waitwin123[7]+ " seconds",20,last1);
jg_doc.setColor("blue");
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+waitwin[7]+ " seconds",20,last1+20);

//Calculate Short Waiting Period for algorithm 1
last1+=400;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "15px", Font.BOLD);
jg_doc.drawString("The Graph of the Maximum Wait sequence VS. Maximum time between adjacent shutdowns is shown below",20,last1-350);
var tshortw1=0;
var waitwin1=new Array (10);
maximum=0;
max1=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh[x];
		while ((tsd1[x]+twu1[x]+sleep[x]+tactive[x+1])<tshortw1)
			{
			max1+=thresh[x+1];
			x++;
			}
	if (max1==thresh[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh[x];
		while ((tsd1[x]+twu1[x]+sleep[x]+tactive[x+1])<tshortw)
			{
			max1+=thresh[x+1];
			x++;
			}
	if (max1==thresh[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1[7]=maximum;

//Calculating Short Waiting Period for algorithm 2
var tshortw1=0;
var waitwin1123=new Array (10);
maximum=0;
max1=0;
var maximum123=0,max123=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh123[x];
		while ((tsd123[x]+twu123[x]+sleep123[x]+tactive123[x+1])<tshortw1)
			{
			max1+=thresh123[x+1];
			x++;
			}
	if (max1==thresh123[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1123[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max123=thresh123[x];
		while ((tsd123[x]+twu123[x]+sleep123[x]+tactive123[x+1])<tshortw)
			{
			max123+=thresh123[x+1];
			x++;
			}
	if (max123==thresh123[x]) max123=0; else {if (max123>maximum123) maximum123=max123;}
	}
waitwin1123[7]=maximum123;

//which waitwin is larger
var imdb;
if (waitwin1[6]>waitwin1123[6]) imdb=waitwin1[6]; else imdb=waitwin1123[6];

//Drawing lines for the scales
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(250,last1,650,last1);
jg_doc.drawLine(250,last1,250,last1-300);

//X SCALE
jg_doc.setColor("black");
var x1=30;
for (x=250;x<=650;x+=80)
	{
	jg_doc.drawLine(x,last1-5,x,last1+5);
	jg_doc.drawString(x1, x,last1+10); 
	x1+=30;
	}
//Y SACALE
var x1=0;
for (x=last1;x>=last1-300;x-=60)
	{
	jg_doc.drawLine(245,x,255,x);
	jg_doc.drawString(x1, 230,x); 
	x1+=Math.round((imdb/5)*1)/1;
	}
jg_doc.setFont("arial", "15px", Font.Italic);
jg_doc.drawString("Maximum time between adjacent shutdowns (in seconds) --->", 295,last1+30); 
jg_doc.drawImage("img1.bmp", 185,last1-250,32,220); 

for (x=1;x<=6;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1123[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("blue");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1[x]/Math.round((imdb/5)*1)/1))
}

jg_doc.setColor("black");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1123[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("blue");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);


//average as well as total wait time computation
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
//calculating the remaining metrics
var totalwait=0,avgwait=0,totalwait123=0,avgwait123=0,totalpower=0,totalpower123=0;
for (x=1;x<=n;x++)
{
totalwait+=thresh[x];
totalwait123+=thresh123[x];
totalpower+=EG[x];
totalpower123+=EG123[x];
}
avgwait=totalwait/n;
avgwait123=totalwait123/n;

last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+waitwin1123[7]+ " seconds",20,last1);
jg_doc.setColor("blue");
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+waitwin1[7]+ " seconds",20,last1+20);


//LEGEND
last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("LEGEND",20,last1);
last1+=25;
jg_doc.drawLine(10,last1+3,30,last1+3);
if (alg1==0) jg_doc.drawString("FIXED TIMEOUT ALGORITHM",50,last1-5);
if (alg1==1) jg_doc.drawString("ADAPTIVE TIMEOUT 1 ALGORITHM",50,last1-5);
if (alg1==2) jg_doc.drawString("ADAPTIVE TIMEOUT 2 ALGORITHM",50,last1-5);
if (alg1==3) jg_doc.drawString("ADAPTIVE TIMEOUT 3 ALGORITHM",50,last1-5);
if (alg1==4) jg_doc.drawString("EXPONENTIAL AVERAGE ALGORITHM",50,last1-5);
jg_doc.setColor("blue");
last1+=20;
jg_doc.drawLine(10,last1+3,30,last1+3);
if (alg2==0) jg_doc.drawString("FIXED TIMEOUT ALGORITHM",50,last1-5);
if (alg2==1) jg_doc.drawString("ADAPTIVE TIMEOUT 1 ALGORITHM",50,last1-5);
if (alg2==2) jg_doc.drawString("ADAPTIVE TIMEOUT 2 ALGORITHM",50,last1-5);
if (alg2==3) jg_doc.drawString("ADAPTIVE TIMEOUT 3 ALGORITHM",50,last1-5);
if (alg2==4) jg_doc.drawString("EXPONENTIAL AVERAGE ALGORITHM",50,last1-5);

//DISPLAY THE FIRST ALGORITHM
jg_doc.setColor("black");
last1+=50;
jg_doc.setFont("arial", "15px", Font.BOLD); 
if (alg1==0) jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last1);
if (alg1==1) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last1);
if (alg1==2) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last1);
if (alg1==3) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last1);
if (alg1==4) jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last1);

last1+=20
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait123 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait123 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower123 * 100)/100+ " watts",20,last1);

//DISPLAY THE SECOND ALGORITHM
jg_doc.setColor("blue");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
if (alg2==0) jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last1);
if (alg2==1) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last1);
if (alg2==2) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last1);
if (alg2==3) jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last1);
if (alg2==4) jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last1);

last1+=20
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower * 100)/100+ " watts",20,last1);

jg_doc.paint(); // draws, in this case, directly into the document
}

//--------------------------------------------------------------------------------------------------------
//Performance Metrics for the algorithms
function allperm() {
//Variables to be used 
var tactive123=new Array(10);
var idle123=new Array(10);
var sleep123=new Array(10);
var wait123=new Array(10);
var EG123= new Array(10);
var thresh123=new Array(10);
var last123=0;

var tactive234=new Array(10);
var idle234=new Array(10);
var sleep234=new Array(10);
var wait234=new Array(10);
var EG234= new Array(10);
var thresh234=new Array(10);
var last234=0;

var tactive345=new Array(10);
var idle345=new Array(10);
var sleep345=new Array(10);
var wait345=new Array(10);
var EG345= new Array(10);
var thresh345=new Array(10);
var last345=0;

var tactive456=new Array(10);
var idle456=new Array(10);
var sleep456=new Array(10);
var wait456=new Array(10);
var EG456= new Array(10);
var thresh456=new Array(10);
var last456=0;

//Preset Delays
del[1]=document.MyForm.time1.value;
del[2]=document.MyForm.time2.value;
del[3]=document.MyForm.time3.value;
del[4]=document.MyForm.time4.value;
del[5]=document.MyForm.time5.value;
diskValues();
if (document.MyForm.TEXTA1.value=="Other")	
	{
	ps=document.MyForm.TEXTA2.value,pw=document.MyForm.TEXTA3.value,tsd=document.MyForm.TEXTA4.value,
	esd=document.MyForm.TEXTA5.value,twu=document.MyForm.TEXTA6.value,ewu=document.MyForm.TEXTA7.value;
	tbe=25;
	}
timeout();
for (x=1;x<=n;x++)
{
tactive123[x]=tactive[x];
idle123[x]=idle[x];
sleep123[x]=sleep[x];
wait123[x]=wait[x];
EG123[x]=EG[x];
thresh123[x]=thresh[x];
}
ato1();
for (x=1;x<=n;x++)
{
tactive234[x]=tactive[x];
idle234[x]=idle[x];
sleep234[x]=sleep[x];
wait234[x]=wait[x];
EG234[x]=EG[x];
thresh234[x]=thresh[x];
}
ato2();
for (x=1;x<=n;x++)
{
tactive345[x]=tactive[x];
idle345[x]=idle[x];
sleep345[x]=sleep[x];
wait345[x]=wait[x];
EG345[x]=EG[x];
thresh345[x]=thresh[x];
}
ato3();
for (x=1;x<=n;x++)
{
tactive456[x]=tactive[x];
idle456[x]=idle[x];
sleep456[x]=sleep[x];
wait456[x]=wait[x];
EG456[x]=EG[x];
thresh456[x]=thresh[x];
}
expoavg();

var tlongw=document.MyForm.tlongw.value;
var tshortw=document.MyForm.tshortw.value;
if (tlongw==0 || tshortw==0)
	{
	alert("Please enter window sizes");
    window.location.reload( false );
	}
	
var jg_doc = new jsGraphics();
var last=10;
document.writeln("");

var tsd1=new Array(10);
var twu1=new Array(10);
var totaltime=new Array(10);
var tsd123=new Array(10);
var twu123=new Array(10);
var totaltime123=new Array(10);
var tsd234=new Array(10);
var twu234=new Array(10);
var totaltime234=new Array(10);
var tsd345=new Array(10);
var twu345=new Array(10);
var totaltime345=new Array(10);
var tsd456=new Array(10);
var twu456=new Array(10);
var totaltime456=new Array(10);
var basetime=new Array(10);

//Modified for all algorithms
for (x=1;x<=n;x++)
{
if (sleep[x]==0) tsd1[x]=0; else tsd1[x]=tsd;
if (sleep123[x]==0) tsd123[x]=0; else tsd123[x]=tsd;
if (sleep234[x]==0) tsd234[x]=0; else tsd234[x]=tsd;
if (sleep345[x]==0) tsd345[x]=0; else tsd345[x]=tsd;
if (sleep456[x]==0) tsd456[x]=0; else tsd456[x]=tsd;

if (sleep[x]==0) twu1[x]=0; else twu1[x]=twu;
if (sleep123[x]==0) twu123[x]=0; else twu123[x]=twu;
if (sleep234[x]==0) twu234[x]=0; else twu234[x]=twu;
if (sleep345[x]==0) twu345[x]=0; else twu345[x]=twu;
if (sleep456[x]==0) twu456[x]=0; else twu456[x]=twu;

basetime[x]=parseInt(tactive[x]+parseInt(del[x]));
totaltime[x]=parseInt(tactive[x]-thresh[x]+2*thresh[x]+tsd1[x]+sleep[x]+twu1[x]);
totaltime123[x]=parseInt(tactive123[x]-thresh123[x]+2*thresh123[x]+tsd123[x]+sleep123[x]+twu123[x]);
totaltime234[x]=parseInt(tactive234[x]-thresh234[x]+2*thresh234[x]+tsd234[x]+sleep234[x]+twu234[x]);
totaltime345[x]=parseInt(tactive345[x]-thresh345[x]+2*thresh345[x]+tsd345[x]+sleep345[x]+twu345[x]);
totaltime456[x]=parseInt(tactive456[x]-thresh456[x]+2*thresh456[x]+tsd456[x]+sleep456[x]+twu456[x]);
}

//for the 1st algorithm
last123=40;
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last123);
last123+=30;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive123[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last, last123+10); 
last=last+2*tactive123[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh123[x],last123);
last+=2*thresh123[x];
jg_doc.setColor("yellow");
if (tsd123[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd123[x],last123);
last+=2*tsd123[x];
jg_doc.setColor("green"); 
if (sleep123[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep123[x],last123);
last+=2*sleep123[x];
jg_doc.setColor("pink"); 
if (twu123[x]!=0) jg_doc.drawLine(last,last123,last+2*twu123[x],last123);
last+=2*twu123[x];
}

last123+=35;
last=10;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last123);
last123+=30;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive234[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last, last123+10); 
last=last+2*tactive234[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh234[x],last123);
last+=2*thresh234[x];
jg_doc.setColor("yellow");
if (tsd234[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd234[x],last123);
last+=2*tsd234[x];
jg_doc.setColor("green"); 
if (sleep234[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep234[x],last123);
last+=2*sleep234[x];
jg_doc.setColor("pink"); 
if (twu234[x]!=0) jg_doc.drawLine(last,last123,last+2*twu234[x],last123);
last+=2*twu234[x];
}

last123+=35;
last=10;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last123);
last123+=30;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive345[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last, last123+10); 
last=last+2*tactive345[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh345[x],last123);
last+=2*thresh345[x];
jg_doc.setColor("yellow");
if (tsd345[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd345[x],last123);
last+=2*tsd345[x];
jg_doc.setColor("green"); 
if (sleep345[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep345[x],last123);
last+=2*sleep345[x];
jg_doc.setColor("pink"); 
if (twu345[x]!=0) jg_doc.drawLine(last,last123,last+2*twu345[x],last123);
last+=2*twu345[x];
}

last123+=35;
last=10;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last123);
last123+=30;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive456[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last, last123+10); 
last=last+2*tactive456[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh456[x],last123);
last+=2*thresh456[x];
jg_doc.setColor("yellow");
if (tsd456[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd456[x],last123);
last+=2*tsd456[x];
jg_doc.setColor("green"); 
if (sleep456[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep456[x],last123);
last+=2*sleep456[x];
jg_doc.setColor("pink"); 
if (twu456[x]!=0) jg_doc.drawLine(last,last123,last+2*twu456[x],last123);
last+=2*twu456[x];
}

last123+=35;
last=10;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last123);
last123+=30;
last=10;
//for the 2nd algorithm
for (x=1;x<=n;x++)
{
jg_doc.setColor("black"); 
jg_doc.setStroke(10);
jg_doc.drawLine(last,last123,last+2*tactive[x],last123);
jg_doc.setFont("font-family", "size+unit", Font.BOLD); 
jg_doc.drawString("cycle"+x, last,last123+10); 
last=last+2*tactive[x];
jg_doc.setColor("red"); 
jg_doc.drawLine(last,last123,last+2*thresh[x],last123);
last+=2*thresh[x];
jg_doc.setColor("yellow");
if (tsd1[x]!=0) jg_doc.drawLine(last,last123,last+2*tsd1[x],last123);
last+=2*tsd1[x];
jg_doc.setColor("green"); 
if (sleep[x]!=0) jg_doc.drawLine(last,last123,last+2*sleep[x],last123);
last+=2*sleep[x];
jg_doc.setColor("pink"); 
if (twu1[x]!=0) jg_doc.drawLine(last,last123,last+2*twu1[x],last123);
last+=2*twu1[x];
}

last1=last123+40;
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(10,last1,last+20,last1);
jg_doc.drawString(">", last+20,last1-10); 

for (x=10;x<=last;x=x+200)
{
jg_doc.drawLine(x,last1-5,x,last1+5);
jg_doc.drawString((x-10)/2, x,last1+10); 
}
last1+=30;
jg_doc.drawString("time (in seconds) --->", last/2,last1); 

last1=last123+90;
jg_doc.setColor("black"); 
jg_doc.drawString("Legend", 10, last1); 
last1+=30;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Active Time",50,last1-5);
jg_doc.setColor("red");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Wait time",50,last1-5);
jg_doc.setColor("yellow");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Shutdown time",50,last1-5);
jg_doc.setColor("green");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Sleep Time",50,last1-5);
jg_doc.setColor("pink");
last1+=20;
jg_doc.drawLine(10,last1,30,last1);
jg_doc.drawString("Time to Wake Up",50,last1-5);

jg_doc.setStroke(1);
jg_doc.setColor("black");
jg_doc.drawRect(10,last1+20,2700,30);
jg_doc.drawRect(10,last1+50,2700,30);
jg_doc.drawRect(10,last1+80,2700,30);
jg_doc.drawRect(10,last1+110,2700,30);
jg_doc.drawRect(10,last1+140,2700,30);
jg_doc.drawRect(10,last1+170,2700,30);
jg_doc.drawRect(10,last1+200,2700,30);
last1+=50;
jg_doc.drawLine(110,last1,110,last1+180);
jg_doc.drawLine(210,last1,210,last1+180);
jg_doc.drawLine(310,last1,310,last1+180);
jg_doc.drawLine(410,last1,410,last1+180);
jg_doc.drawLine(510,last1,510,last1+180);
jg_doc.drawLine(610,last1,610,last1+180);
jg_doc.drawLine(710,last1,710,last1+180);
jg_doc.drawLine(810,last1,810,last1+180);
jg_doc.drawLine(910,last1,910,last1+180);
jg_doc.drawLine(1010,last1,1010,last1+180);
jg_doc.drawLine(1110,last1,1110,last1+180);
jg_doc.drawLine(1210,last1,1210,last1+180);
jg_doc.drawLine(1310,last1,1310,last1+180);
jg_doc.drawLine(1410,last1,1410,last1+180);
jg_doc.drawLine(1510,last1,1510,last1+180);
jg_doc.drawLine(1610,last1,1610,last1+180);
jg_doc.drawLine(1710,last1,1710,last1+180);
jg_doc.drawLine(1810,last1,1810,last1+180);
jg_doc.drawLine(1910,last1,1910,last1+180);
jg_doc.drawLine(2010,last1,2010,last1+180);
jg_doc.drawLine(2110,last1,2110,last1+180);
jg_doc.drawLine(2210,last1,2210,last1+180);
jg_doc.drawLine(2310,last1,2310,last1+180);
jg_doc.drawLine(2410,last1,2410,last1+180);
jg_doc.drawLine(2510,last1,2510,last1+180);
jg_doc.drawLine(2610,last1,2610,last1+180);
jg_doc.drawLine(2710,last1,2710,last1+180);

jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FIXED TIMEOUT ALGORITHM",20,last1-30);
jg_doc.setColor("blue");
jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 1 ALGORITHM",250,last1-30);
jg_doc.setColor("red");
jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 2 ALGORITHM",530,last1-30);
jg_doc.setColor("green");
jg_doc.drawString("../../../../ ADAPTIVE TIMEOUT 3 ALGORITHM",810,last1-30);
jg_doc.setColor("pink");
jg_doc.drawString("../../../../ EXPONENTIAL AVERAGE ALGORITHM",1110,last1-30);

jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("Cycle Number",20,last1+10);
jg_doc.drawString("Tactive",120,last1+10);
jg_doc.drawString("Wait time",620,last1+10);
jg_doc.drawString("Tsleep",1120,last1+10);
jg_doc.drawString("Power Gained",1620,last1+10);
jg_doc.drawString("Total Time",2120,last1+10);
jg_doc.setFont("font-family", "size+unit", Font.BOLD);
jg_doc.drawString("THE CHART BELOW SHOWS YOU THE PERFORMANCE OF THE ALGORITHMS",10,10);
jg_doc.setColor("blue");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("Tactive",220,last1+10);
jg_doc.drawString("Wait time",720,last1+10);
jg_doc.drawString("Tsleep",1220,last1+10);
jg_doc.drawString("Power Gained",1720,last1+10);
jg_doc.drawString("Total Time",2220,last1+10);
jg_doc.setColor("red");
jg_doc.setFont("arial", "12px", Font.BOLD)
jg_doc.drawString("Tactive",320,last1+10);;
jg_doc.drawString("Wait time",820,last1+10);
jg_doc.drawString("Tsleep",1320,last1+10);
jg_doc.drawString("Power Gained",1820,last1+10);
jg_doc.drawString("Total Time",2320,last1+10);
jg_doc.setColor("green");
jg_doc.setFont("arial", "12px", Font.BOLD)
jg_doc.drawString("Tactive",420,last1+10);;
jg_doc.drawString("Wait time",920,last1+10);
jg_doc.drawString("Tsleep",1420,last1+10);
jg_doc.drawString("Power Gained",1920,last1+10);
jg_doc.drawString("Total Time",2420,last1+10);
jg_doc.setColor("pink");
jg_doc.setFont("arial", "12px", Font.BOLD)
jg_doc.drawString("Tactive",520,last1+10);;
jg_doc.drawString("Wait time",1020,last1+10);
jg_doc.drawString("Tsleep",1520,last1+10);
jg_doc.drawString("Power Gained",2020,last1+10);
jg_doc.drawString("Total Time",2520,last1+10);
jg_doc.setColor("black");
jg_doc.drawString("Base Time",2620,last1+10);

last1+=10;
for (x=1;x<=n;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("Cycle"+x,20,last1+30*x);
jg_doc.drawString(Math.round(tactive123[x]* 100)/100,120,last1+30*x);
jg_doc.drawString(Math.round(thresh123[x]* 100)/100,620,last1+30*x);
jg_doc.drawString(Math.round(sleep123[x]* 100)/100,1120,last1+30*x);
jg_doc.drawString(Math.round(EG123[x]* 100)/100,1620,last1+30*x);
jg_doc.drawString(Math.round(totaltime123[x]* 100)/100,2120,last1+30*x);
jg_doc.setColor("blue");
jg_doc.drawString(Math.round(tactive234[x]* 100)/100,220,last1+30*x);
jg_doc.drawString(Math.round(thresh234[x]* 100)/100,720,last1+30*x);
jg_doc.drawString(Math.round(sleep234[x]* 100)/100,1220,last1+30*x);
jg_doc.drawString(Math.round(EG234[x]* 100)/100,1720,last1+30*x);
jg_doc.drawString(Math.round(totaltime234[x]* 100)/100,2220,last1+30*x);
jg_doc.setColor("red");
jg_doc.drawString(Math.round(tactive345[x]* 100)/100,320,last1+30*x);
jg_doc.drawString(Math.round(thresh345[x]* 100)/100,820,last1+30*x);
jg_doc.drawString(Math.round(sleep345[x]* 100)/100,1320,last1+30*x);
jg_doc.drawString(Math.round(EG345[x]* 100)/100,1820,last1+30*x);
jg_doc.drawString(Math.round(totaltime345[x]* 100)/100,2320,last1+30*x);
jg_doc.setColor("green");
jg_doc.drawString(Math.round(tactive456[x]* 100)/100,420,last1+30*x);
jg_doc.drawString(Math.round(thresh456[x]* 100)/100,920,last1+30*x);
jg_doc.drawString(Math.round(sleep456[x]* 100)/100,1420,last1+30*x);
jg_doc.drawString(Math.round(EG456[x]* 100)/100,1920,last1+30*x);
jg_doc.drawString(Math.round(totaltime456[x]* 100)/100,2420,last1+30*x);
jg_doc.setColor("pink");
jg_doc.drawString(Math.round(tactive[x]* 100)/100,520,last1+30*x);
jg_doc.drawString(Math.round(thresh[x]* 100)/100,1020,last1+30*x);
jg_doc.drawString(Math.round(sleep[x]* 100)/100,1520,last1+30*x);
jg_doc.drawString(Math.round(EG[x]* 100)/100,2020,last1+30*x);
jg_doc.drawString(Math.round(totaltime[x]* 100)/100,2520,last1+30*x);
jg_doc.setColor("black");
jg_doc.drawString(Math.round(basetime[x]* 100)/100,2620,last1+30*x);
}

last1+=550;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "15px", Font.BOLD);
jg_doc.drawString("The Graph of the Max. Wait time in the Window VS. The Window size is shown below",20,last1-350);
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(250,last1,650,last1);
jg_doc.drawLine(250,last1,250,last1-300);

	var timewait123=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive123[count];x1++)
			{
			timewait123[x]=0;x++;
			}
		for (x1=1;x1<=thresh123[count];x1++)
			{
			timewait123[x]=1;x++;
			}
		for (x1=1;x1<=(tsd123[count]+twu123[count]+sleep123[count]);x1++)
			{
			timewait123[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin123=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait123[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin123[x1/30]=maximum;
}
//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait123[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin123[7]=maximum;

//Calculating Long Waiting Period for algorithm 2
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait234=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive234[count];x1++)
			{
			timewait234[x]=0;x++;
			}
		for (x1=1;x1<=thresh234[count];x1++)
			{
			timewait234[x]=1;x++;
			}
		for (x1=1;x1<=(tsd234[count]+twu234[count]+sleep234[count]);x1++)
			{
			timewait234[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin234=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait234[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin234[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait234[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin234[7]=maximum;

//Calculating Long Waiting Period for algorithm 3
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait345=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive345[count];x1++)
			{
			timewait345[x]=0;x++;
			}
		for (x1=1;x1<=thresh345[count];x1++)
			{
			timewait345[x]=1;x++;
			}
		for (x1=1;x1<=(tsd345[count]+twu345[count]+sleep345[count]);x1++)
			{
			timewait345[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin345=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait345[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin345[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait345[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin345[7]=maximum;

//Calculating Long Waiting Period for algorithm 4
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait456=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive456[count];x1++)
			{
			timewait456[x]=0;x++;
			}
		for (x1=1;x1<=thresh456[count];x1++)
			{
			timewait456[x]=1;x++;
			}
		for (x1=1;x1<=(tsd456[count]+twu456[count]+sleep456[count]);x1++)
			{
			timewait456[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin456=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait456[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin456[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait456[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin456[7]=maximum;

//Calculating Long Waiting Period for algorithm 5
	var truetotal=0;
	for (x=1;x<=n;x++)
	truetotal+=totaltime[x];

	var timewait=new Array(10000);
	var x2;
	x=1;
	var count=1;	
	while (count<=n)
		{
		for (x1=1;x1<=tactive[count];x1++)
			{
			timewait[x]=0;x++;
			}
		for (x1=1;x1<=thresh[count];x1++)
			{
			timewait[x]=1;x++;
			}
		for (x1=1;x1<=(tsd1[count]+twu1[count]+sleep[count]);x1++)
			{
			timewait[x]=0;x++;
			}
		count++;
		}

x1=30;
var max1=0;maximum=0,x2,wait2=0;
var waitwin=new Array(10);
for (x1=30;x1<=180;x1+=30)
{
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;wait2=0;
	for (count=x;count<(x+x1);count++)
	if (timewait[count]==1) max1++;
			
	if (max1>maximum) maximum=max1;
	}
waitwin[x1/30]=maximum;
}

//for specified window size
x1=tlongw-5+5;
maximum=0;
for (x=1;x<=truetotal-x1;x++)
	{
	max1=0;
	for (count=x;count<(x+x1);count++)
	if (timewait[count]==1) max1++;
	if (max1>maximum) maximum=max1;
	}
waitwin[7]=maximum;

//which waitwin is larger
var imdb,imdb1;
if (waitwin[6]>waitwin123[6]) imdb=waitwin[6]; else imdb=waitwin123[6];
if (waitwin234[6]>waitwin345[6]) imdb1=waitwin234[6]; else imdb1=waitwin345[6];
if (imdb1>imdb) imdb=imdb1; 
if (waitwin456[6]>imdb) imdb=waitwin456[6]; 


//X SCALE
var x1=30;
for (x=250;x<=650;x+=80)
	{
	jg_doc.drawLine(x,last1-5,x,last1+5);
	jg_doc.drawString(x1, x,last1+10); 
	x1+=30;
	}
//Y SACALE
var x1=0;
for (x=last1;x>=last1-300;x-=60)
	{
	jg_doc.drawLine(245,x,255,x);
	jg_doc.drawString(x1, 230,x); 
	x1+=Math.round((imdb/5)*1)/1;
	}
jg_doc.setFont("arial", "15px", Font.Italic);
jg_doc.drawString("Window Size (in seconds) --->", 295,last1+30); 
jg_doc.drawImage("img2.bmp", 185,last1-250,32,220); 

for (x=1;x<=6;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin123[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("blue");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin234[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("red");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin345[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("green");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin456[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("pink");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin[x]/Math.round((imdb/5)*1)/1))
}

jg_doc.setColor("black");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin123[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin123[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("blue");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin234[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin234[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin234[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin234[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin234[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin234[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("red");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin345[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin345[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin345[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin345[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin345[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin345[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("green");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin456[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin456[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin456[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin456[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin456[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin456[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("pink");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+Math.round((waitwin123[7]*100)/100)+ " seconds",20,last1);
jg_doc.setColor("blue");
last1+=20;
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+Math.round((waitwin234[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("red");
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+Math.round((waitwin345[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("green");
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+Math.round((waitwin456[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("pink");
jg_doc.drawString("For the windows size of "+tlongw+" seconds that you provided Maximum wait time is = "+Math.round((waitwin[7]*100)/100)+ " seconds",20,last1);

//Calculating Short Waiting Period for algorithm 1
last1+=400;
jg_doc.setColor("black"); 
jg_doc.setFont("arial", "15px", Font.BOLD);
jg_doc.drawString("The Graph of the Maximum Wait sequence VS. Maximum time between adjacent shutdowns is shown below",20,last1-350);
var tshortw1=0;
var waitwin1123=new Array (10);
maximum=0;
max1=0;
var maximum123=0,max123=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh123[x];
		while ((tsd123[x]+twu123[x]+sleep123[x]+tactive123[x+1])<tshortw1)
			{
			max1+=thresh123[x+1];
			x++;
			}
	if (max1==thresh123[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1123[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max123=thresh123[x];
		while ((tsd123[x]+twu123[x]+sleep123[x]+tactive123[x+1])<tshortw)
			{
			max123+=thresh123[x+1];
			x++;
			}
	if (max123==thresh123[x]) max123=0; else {if (max123>maximum123) maximum123=max123;}
	}
waitwin1123[7]=maximum123;

//Calculating Short Waiting Period for algorithm 2
var tshortw1=0;
var waitwin1234=new Array (10);
maximum=0;
max1=0;
var maximum123=0,max123=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh234[x];
		while ((tsd234[x]+twu234[x]+sleep234[x]+tactive234[x+1])<tshortw1)
			{
			max1+=thresh234[x+1];
			x++;
			}
	if (max1==thresh234[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1234[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max123=thresh234[x];
		while ((tsd234[x]+twu234[x]+sleep234[x]+tactive234[x+1])<tshortw)
			{
			max123+=thresh234[x+1];
			x++;
			}
	if (max123==thresh234[x]) max123=0; else {if (max123>maximum123) maximum123=max123;}
	}
waitwin1234[7]=maximum123;

//Calculating Short Waiting Period for algorithm 3
var tshortw1=0;
var waitwin1345=new Array (10);
maximum=0;
max1=0;
var maximum123=0,max123=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh345[x];
		while ((tsd345[x]+twu345[x]+sleep345[x]+tactive345[x+1])<tshortw1)
			{
			max1+=thresh345[x+1];
			x++;
			}
	if (max1==thresh345[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1345[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max123=thresh345[x];
		while ((tsd345[x]+twu345[x]+sleep345[x]+tactive345[x+1])<tshortw)
			{
			max123+=thresh345[x+1];
			x++;
			}
	if (max123==thresh345[x]) max123=0; else {if (max123>maximum123) maximum123=max123;}
	}
waitwin1345[7]=maximum123;

//Calculating Short Waiting Period for algorithm 4
var tshortw1=0;
var waitwin1456=new Array (10);
maximum=0;
max1=0;
var maximum123=0,max123=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh456[x];
		while ((tsd456[x]+twu456[x]+sleep456[x]+tactive456[x+1])<tshortw1)
			{
			max1+=thresh456[x+1];
			x++;
			}
	if (max1==thresh456[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1456[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max123=thresh456[x];
		while ((tsd456[x]+twu456[x]+sleep456[x]+tactive456[x+1])<tshortw)
			{
			max123+=thresh456[x+1];
			x++;
			}
	if (max123==thresh456[x]) max123=0; else {if (max123>maximum123) maximum123=max123;}
	}
waitwin1456[7]=maximum123;

//Calculate Short Waiting Period for algorithm 5
var waitwin1=new Array (10);
var tshortw1=0;
maximum=0;
max1=0;
for (tshortw1=30;tshortw1<=180;tshortw1+=30)
{
	for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh[x];
		while ((tsd1[x]+twu1[x]+sleep[x]+tactive[x+1])<tshortw1)
			{
			max1+=thresh[x+1];
			x++;
			}
	if (max1==thresh[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1[tshortw1/30]=maximum;
max1=0;maximum=0;
}

//for specified window size
for (count=1;count<n;count++)
	{
		x=count;
		max1=thresh[x];
		while ((tsd1[x]+twu1[x]+sleep[x]+tactive[x+1])<tshortw)
			{
			max1+=thresh[x+1];
			x++;
			}
	if (max1==thresh[x]) max1=0; else {if (max1>maximum) maximum=max1;}
	}
waitwin1[7]=maximum;

//which waitwin is larger
var imdb,imdb1;
if (waitwin1[6]>waitwin1123[6]) imdb=waitwin1[6]; else imdb=waitwin1123[6];
if (waitwin1234[6]>waitwin1345[6]) imdb1=waitwin1234[6]; else imdb1=waitwin1345[6];
if (imdb1>imdb) imdb=imdb1; 
if (waitwin1456[6]>imdb) imdb=waitwin1456[6]; 

//Drawing lines for the scales
jg_doc.setColor("black"); 
jg_doc.setStroke(1);
jg_doc.drawLine(250,last1,650,last1);
jg_doc.drawLine(250,last1,250,last1-300);

//X SCALE
var x1=30;
for (x=250;x<=650;x+=80)
	{
	jg_doc.drawLine(x,last1-5,x,last1+5);
	jg_doc.drawString(x1, x,last1+10); 
	x1+=30;
	}
//Y SACALE
var x1=0;
for (x=last1;x>=last1-300;x-=60)
	{
	jg_doc.drawLine(245,x,255,x);
	jg_doc.drawString(x1, 230,x); 
	x1+=Math.round((imdb/5)*1)/1;
	}
jg_doc.setFont("arial", "15px", Font.Italic);
jg_doc.drawString("Maximum time between adjacent shutdowns (in seconds) --->", 295,last1+30); 
jg_doc.drawImage("img1.bmp", 185,last1-250,32,220); 

for (x=1;x<=6;x++)
{
jg_doc.setColor("black");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1123[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("blue");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1234[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("red");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1345[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("green");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1456[x]/Math.round((imdb/5)*1)/1))
jg_doc.setColor("pink");
jg_doc.drawString("|",170+80*x,last1-10-60*(waitwin1[x]/Math.round((imdb/5)*1)/1))
}

jg_doc.setColor("black");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1123[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1123[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("blue");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1234[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1234[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1234[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1234[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1234[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1234[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("red");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1345[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1345[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1345[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1345[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1345[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1345[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("green");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1456[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1456[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1456[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1456[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1456[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1456[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

jg_doc.setColor("pink");
var Xpoints = new Array(250,330,410,490,570,650);
var Ypoints = new Array(last1-60*(waitwin1[1]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[2]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[3]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[4]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[5]/Math.round((imdb/5)*1)/1),last1-60*(waitwin1[6]/Math.round((imdb/5)*1)/1));
jg_doc.drawPolyline(Xpoints,Ypoints);

last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD); 
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+Math.round((waitwin1123[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("blue");
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+Math.round((waitwin1234[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("red");
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+Math.round((waitwin1345[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("green");
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+Math.round((waitwin1456[7]*100)/100)+ " seconds",20,last1);
last1+=20;
jg_doc.setColor("pink");
jg_doc.drawString("For the value of "+tshortw+" seconds between adjacent shutdowns, Maximum wait sequence = "+Math.round((waitwin1[7]*100)/100)+ " seconds",20,last1);


last1+=60;
jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
jg_doc.drawString("LEGEND",20,last1);
last1+=25;
jg_doc.drawLine(10,last1+3,30,last1+3);
jg_doc.drawString("FIXED TIMEOUT ALGORITHM",50,last1-5);

jg_doc.setColor("blue");
last1+=20;
jg_doc.drawLine(10,last1+3,30,last1+3);
jg_doc.drawString("ADAPTIVE TIMEOUT 1 ALGORITHM",50,last1-5);

jg_doc.setColor("red");
last1+=20;
jg_doc.drawLine(10,last1+3,30,last1+3);
jg_doc.drawString("ADAPTIVE TIMEOUT 2 ALGORITHM",50,last1-5);

jg_doc.setColor("green");
last1+=20;
jg_doc.drawLine(10,last1+3,30,last1+3);
jg_doc.drawString("ADAPTIVE TIMEOUT 3 ALGORITHM",50,last1-5);

jg_doc.setColor("pink");
last1+=20;
jg_doc.drawLine(10,last1+3,30,last1+3);
jg_doc.drawString("EXPONENTIAL AVERAGE ALGORITHM",50,last1-5);

jg_doc.setColor("black");
jg_doc.setFont("arial", "12px", Font.BOLD);
//calculating the remaining metrics
var totalwait=0,avgwait=0,totalwait123=0,avgwait123=0,totalwait234=0,avgwait234=0,totalwait345=0,avgwait345=0,totalwait456=0,avgwait456=0,totalpower=0,totalpower123=0,totalpower234=0,totalpower345=0,totalpower456=0;
for (x=1;x<=n;x++)
{
totalwait+=thresh[x];
totalwait123+=thresh123[x];
totalwait234+=thresh234[x];
totalwait345+=thresh345[x];
totalwait456+=thresh456[x];
totalpower+=EG[x];
totalpower123+=EG123[x];
totalpower234+=EG234[x];
totalpower345+=EG345[x];
totalpower456+=EG456[x];
}
avgwait=totalwait/n;
avgwait123=totalwait123/n;
avgwait234=totalwait234/n;
avgwait345=totalwait345/n;
avgwait456=totalwait456/n;
	
//DISPLAY THE FIRST ALGORITHM
jg_doc.setColor("black");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FOR FIXED TIMEOUT ALGORITHM",20,last1);
last1+=20
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait123 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait123 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower123 * 100)/100+ " watts",20,last1);


//DISPLAY THE SECOND ALGORITHM
jg_doc.setColor("blue");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 1 ALGORITHM",20,last1);
last1+=20;
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait234 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait234 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower234 * 100)/100+ " watts",20,last1);



//DISPLAY THE THIRD ALGORITHM
jg_doc.setColor("red");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 2 ALGORITHM",20,last1);
last1+=20
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait345 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait345 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower345 * 100)/100+ " watts",20,last1);

//DISPLAY THE FOURTH ALGORITHM
jg_doc.setColor("green");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FOR ADAPTIVE TIMEOUT 3 ALGORITHM",20,last1);
last1+=20
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait456 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait456 * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower456 * 100)/100+ " watts",20,last1);

//DISPLAY THE FIFTH ALGORITHM
jg_doc.setColor("pink");
last1+=30;
jg_doc.setFont("arial", "15px", Font.BOLD); 
jg_doc.drawString("FOR EXPONENTIAL AVERAGE ALGORITHM",20,last1);
last1+=20
jg_doc.drawString("The total waiting delay for the algorithm (for all cycles) = "+ Math.round(totalwait * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The average wait delay for the algorithm (per cycle) = "+Math.round(avgwait * 100)/100+ " seconds",20,last1);
last1+=20;
jg_doc.drawString("The total power gained in Watts(for all cycles) = "+Math.round(totalpower * 100)/100+ " watts",20,last1);

jg_doc.paint(); // draws, in this case, directly into the document
}

//------------------------------------------------------------------------------------------------------
function operateSCAN(s,inputArr)
{
var insideArr = new Array();
var outArr = new Array();
var output = new Array(inputArr.length);

for(i=0;i<inputArr.length;i++)
{
	if(parseInt(s) >= parseInt(inputArr[i]))
	{
		insideArr.length++;
		//alert(insideArr.length);
		insideArr[insideArr.length - 1]= inputArr[i];
	}
	if(parseInt(s) < parseInt(inputArr[i]))
	{
		outArr.length++;
		//alert(insideArr.length);
		outArr[outArr.length - 1]= inputArr[i];
	}
}
insideArr.sort(descending);
outArr.sort(descending); 
for(k=0;k<insideArr.length;k++)
output[k]=insideArr[k];
for(l=insideArr.length;l<inputArr.length;l++)
output[l]=outArr[l-insideArr.length];

//alert("inside array" + insideArr);
//alert("outArray" + outArr);
return output;
}

//------------------------------------------------------------------------------------------------------
//Operation of the SSTF function
function operateSSTF(s,inputArr)
{
var Arr = inputArr;
var trackOrder = new Array(4);
var nextTrack;
var start = s;
	for(l=0;l<4;l++)
	{
		if(l==0)
		nextTrack = minDistance(start,inputArr);
		else
		{
			var newArr = new Array(4-l);
			var c = 0;
			var did =0;
			for(j=0;j<Arr.length;j++)
			{
				if(Arr[j] != nextTrack || (Arr[j] == nextTrack && did == 1))
				{
				newArr[c] = Arr[j];
				c++;
				}
				else
				{did = 1;}
			}
			nextTrack = minDistance(nextTrack,newArr);
			Arr = newArr;
		}
		trackOrder[l] = nextTrack;
	}
	return trackOrder;
}
//---------------------------------------------------------------------------------------------------------
//End of Script Start of Form
		</SCRIPT>
 
<FORM id=MyForm name=MyForm method=get>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD colSpan=2><A 
      href="help.htm"><FONT 
      color=#000000>
    <IMG height=68 alt="Computer Architecture Final Project" 
      src="GlobalNav_Logo.jpg" width=454 border=0></FONT></A></TD></TR>
  <TR>
    <TD width=19><IMG height=8 src="" width=19></TD>
    <TD>
      <DIV align=left>
      <TABLE cellSpacing=0 cellPadding=0 width=463 border=0>
        <TBODY>
        <TR>
          <TD width=260><FONT color=#000000><B>&nbsp;&nbsp; <A 
            href="demo.htm">SIMULATION 
            </A></B></FONT></TD>
          <TD width=182><FONT color=#000000><B><A href="help.htm">HELP 
            FILE </a></B></FONT></TD>
          <TD 
width=21>&nbsp;</TD></TR></TBODY></TABLE></DIV></TD></TR></TBODY></TABLE><BR>
<TABLE cellSpacing=0 cellPadding=0 width="97%" align=center border=0>
  <TBODY>
  <TR>
    <TD vAlign=top colSpan=3><IMG height=18 src="" width=9 
  border=0></TD></TR></TBODY></TABLE><BR>
<TABLE cellSpacing=0 cellPadding=0 width="97%" align=center border=0>
  <TBODY>
  <TR vAlign=top>
    <TD>
      <H4><FONT color=#000000>DISK POWER MANAGEMENT SIMULATOR</FONT></H4>
      <OL>
        <LI><B><FONT color=#000000>Disk Model&nbsp; &nbsp;</FONT><SELECT 
        onchange=diskValues() size=1 name=diskModel> <OPTION value=IBM 
          selected>IBM</OPTION> <OPTION value=Fujitsu>Fujitsu</OPTION> <OPTION 
          value=other>User Defined</OPTION></SELECT></B><FONT color=#000000>&nbsp; 
        </FONT></LI></OL>
      <TABLE id=AutoNumber1 style="BORDER-COLLAPSE: collapse" 
      borderColor=#ffffff height=73 cellSpacing=0 borderColorDark=#ffffff 
      cellPadding=0 width="73%" borderColorLight=#ffffff border=1>
        <TBODY>
        <TR>
          <TD width="13%" height=38><B>&nbsp;Model</B></TD>
          <TD width="15%" height=38>&nbsp;<B>Ps (Watts)</B></TD>
          <TD width="15%" height=38><B>&nbsp;Pw (Watts) </B></TD>
          <TD width="14%" height=38>&nbsp;<B>Tsd (sec)</B></TD>
          <TD width="12%" height=38><B>&nbsp;Esd (J)</B></TD>
          <TD width="15%" height=38>&nbsp;<B>Twu (sec) </B></TD>
          <TD width="16%" height=38>&nbsp;<B>Ewu (J)</B></TD></TR>
        <TR>
          <TD width="13%" height=34>&nbsp;<INPUT size=7 name=TEXTA1></TD>
          <TD width="15%" height=34><INPUT size=4 name=TEXTA2></TD>
          <TD width="15%" height=34><INPUT size=4 name=TEXTA3></TD>
          <TD width="14%" height=34><INPUT size=4 name=TEXTA4></TD>
          <TD width="12%" height=34><INPUT size=4 name=TEXTA5></TD>
          <TD width="15%" height=34><INPUT size=4 name=TEXTA6></TD>
          <TD width="16%" height=34><INPUT size=4 
      name=TEXTA7></TD></TR></TBODY></TABLE>
      <OL>
        <LI><FONT color=#000000><B>Head Starting Track Number</B>&nbsp; &nbsp; 
        </FONT><INPUT id=startLocation maxLength=3 size=5 name=stLoc><FONT 
        color=#000000> </FONT>
        <LI><FONT color=#000000><B>Enter Disk Access Track 
        Numbers</B>&nbsp;<STRONG> (0-600) and Time between Disk Accesses&nbsp; 
        <BR></STRONG>Track Numbers in 
        <STRONG>first</STRONG>&nbsp;queue&nbsp;&nbsp;&nbsp;&nbsp; </FONT><INPUT 
        id=T11 maxLength=3 size=1 name=T11><FONT color=#000000> </FONT><INPUT 
        id=T12 maxLength=3 size=1 name=T12><FONT color=#000000> </FONT><INPUT 
        id=T13 maxLength=3 size=1 name=T13><FONT color=#000000> </FONT><INPUT 
        id=T14 maxLength=3 size=1 name=T14><FONT 
        color=#000000>&nbsp;&nbsp;<BR>Time Interval (seconds) 
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </FONT><INPUT size=11 
        name=time1><FONT color=#000000> &nbsp; <BR>Track Numbers in 
        <STRONG>second</STRONG>&nbsp;queue </FONT><INPUT id=T21 maxLength=3 
        size=1 name=T21><FONT color=#000000> </FONT><INPUT id=T22 maxLength=3 
        size=1 name=T22><FONT color=#000000> </FONT><INPUT id=T23 maxLength=3 
        size=1 name=T23><FONT color=#000000> </FONT><INPUT id=T24 maxLength=3 
        size=1 name=T24><FONT color=#000000>&nbsp;&nbsp;<BR>Time Interval 
        (seconds)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
        </FONT><INPUT size=11 name=time2><FONT color=#000000> &nbsp; <BR>Track 
        Numbers in <STRONG>third</STRONG>&nbsp;queue&nbsp;&nbsp;&nbsp; 
        </FONT><INPUT id=T31 maxLength=3 size=1 name=T31><FONT color=#000000> 
        </FONT><INPUT id=T32 maxLength=3 size=1 name=T32><FONT color=#000000> 
        </FONT><INPUT id=T33 maxLength=3 size=1 name=T33><FONT color=#000000> 
        </FONT><INPUT id=T34 maxLength=3 size=1 name=T34><FONT 
        color=#000000>&nbsp;&nbsp;<BR>Time Interval 
        (seconds)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
        </FONT><INPUT size=11 name=time3><FONT color=#000000> <BR>Track Numbers 
        in <STRONG>fourth</STRONG>&nbsp;queue&nbsp; </FONT><INPUT id=T41 
        maxLength=3 size=1 name=T41><FONT color=#000000> </FONT><INPUT id=T42 
        maxLength=3 size=1 name=T42><FONT color=#000000> </FONT><INPUT id=T43 
        maxLength=3 size=1 name=T43><FONT color=#000000> </FONT><INPUT id=T44 
        maxLength=3 size=1 name=T44><FONT color=#000000> &nbsp;&nbsp;<BR>Time 
        Interval (seconds)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp; </FONT><INPUT size=11 name=time4><FONT color=#000000> 
        <BR>Track Numbers in <STRONG>fifth</STRONG>&nbsp;queue 
        &nbsp;&nbsp;&nbsp; </FONT><INPUT id=T51 maxLength=3 size=1 
        name=T51><FONT color=#000000> </FONT><INPUT id=T52 maxLength=3 size=1 
        name=T52><FONT color=#000000> </FONT><INPUT id=T53 maxLength=3 size=1 
        name=T53><FONT color=#000000> </FONT><INPUT id=T54 maxLength=3 size=1 
        name=T54><FONT color=#000000> &nbsp;&nbsp;<BR>Time Interval 
        (seconds)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
        </FONT><INPUT size=11 name=time5><FONT color=#000000> </FONT></LI></OL>
      <UL>
        <LI><B><FONT color=#000000>Run all Algorithms&nbsp;</FONT></B><FONT color=#000000>&nbsp;</FONT><INPUT id=Button1 onclick=callFun(); type=button value=GO name=Go><FONT 
        color=#000000> </FONT></LI></UL>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <INPUT id=Button1 onclick=autofill(); type=button value=Autofill name=fill> 

      <P>&nbsp;</P>
      <TABLE id=Table1 cellSpacing=1 cellPadding=1 width=600 bgColor=#ffffff 
      border=0>
        <TBODY>
        <TR>
          <TD width=200 bgColor=#ff6633>
            <P align=center><STRONG>S.S.T.F</STRONG></P></TD>
          <TD width=200 bgColor=#ff6633>
            <P align=center><STRONG>C-LOOK</STRONG></P></TD>
          <TD bgColor=#ff6633>
            <P align=center><STRONG>FCFS</STRONG></P></TD></TR>
        <TR>
          <TD width=200 bgColor=#ffcc33>
            <P>Start Track: 
            <INPUT id=Text1 readOnly size=1 
            name=startsstf style="background-color: #FFCC33"><BR>Track Access Order:</P>
            <P>
            <TEXTAREA id=Textarea1 name=Textarea1 rows=4 cols=30 style="background-color: #FFCC33">										</TEXTAREA> 
            </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Start Track: 
            <INPUT id=Text2 readOnly size=1 
            name=startscan style="background-color: #FFCC33"><BR>Track Access Order:</P>
            <P>
            <TEXTAREA id=Textarea2 name=Textarea2 rows=4 cols=30 style="background-color: #FFCC33">										</TEXTAREA> 
            </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Start Track: 
            <INPUT id=Text3 readOnly size=1 
            name=startfcfs style="background-color: #FFCC33"><BR>Track Access Order:</P>
            <P>
            <TEXTAREA id=Textarea3 name=Textarea3 rows=4 wrap=PHYSICAL cols=30 style="background-color: #FFCC33">										</TEXTAREA> 
            </P></TD></TR>
        <TR>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Tracks Accessed: (Tt) <BR><B>
            <INPUT id=Text4 readOnly 
            size=2 name=ttracksSSTF style="background-color: #FFCC33"> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Tracks Accessed: (Tt) <BR><B>
            <INPUT id=Text5 readOnly 
            size=2 name=ttracksSCAN style="background-color: #FFCC33"></B> </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Tracks Accessed: (Tt) <BR><B>
            <INPUT id=Text6 readOnly 
            size=2 name=ttracksFCFS style="background-color: #FFCC33"></B> </P></TD></TR>
        <TR>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Disk Accesses: (Td) <BR><B>
            <INPUT id=Text7 readOnly size=2 
            name=tdisksSSTF style="background-color: #FFCC33"></B></P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Disk Accesses: (Td) <BR><B>
            <INPUT id=Text8 readOnly size=2 
            name=tdisksSCAN style="background-color: #FFCC33"></B> </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Total Disk Accesses: (Td) <BR><B>
            <INPUT id=Text9 readOnly size=2 
            name=tdisksFCFS style="background-color: #FFCC33"></B> </P></TD></TR>
        <TR>
          <TD width=200 bgColor=#ffcc33>
            <P>Average Seek Length: (Tt/Td) <BR><B>
            <INPUT readOnly size=3 
            name=alengthSSTF style="background-color: #FFCC33"></B></P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Average Seek Length: (Tt/Td) <BR><B>
            <INPUT readOnly size=3 
            name=alengthSCAN style="background-color: #FFCC33"></B> </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Average Seek Length: (Tt/Td) <BR><B>
            <INPUT readOnly size=3 
            name=alengthCSCAN style="background-color: #FFCC33"></B> </P></TD></TR>
        <TR>
          <TD width=200 bgColor=#ffcc33>
            <P>Energy Use (mJ) : (Ta X Pw) <BR><B>
            <INPUT id=Text13 readOnly 
            size=3 name=energySSTF style="background-color: #FFCC33"></B></P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Energy Use (mJ) : (Ta X Pw) <BR><B>
            <INPUT id=Text14 readOnly 
            size=3 name=energySCAN style="background-color: #FFCC33"></B> </P></TD>
          <TD width=200 bgColor=#ffcc33>
            <P>Energy Use (mJ) : (Ta X Pw) <BR><B>
            <INPUT id=Text15 readOnly 
            size=3 name=energyFCFS style="background-color: #FFCC33"></B> </P></TD></TR></TBODY></TABLE>
      <P></P>
      <UL>
        <LI><FONT color=#000000><STRONG>Apply Power Management Algorithm 
        </STRONG></FONT><SELECT size=1 name=SelectAlgorithm> <OPTION 
          value=fixed selected>Fixed Timeout</OPTION> <OPTION 
          value=ato1>ATO1</OPTION> <OPTION value=ato2>ATO2</OPTION> <OPTION 
          value=ato3>ATO3</OPTION> <OPTION value=expoavg>Exponential 
          Avg</OPTION> <OPTION value=all>All</OPTION></SELECT><FONT 
        color=#000000>&nbsp;</FONT><INPUT id=Button2 onclick=callPowerfnc() type=button value=GO name=Go><FONT 
        color=#000000> </FONT></LI></UL>
      <P><FONT color=#ffffff>
      <TABLE id=Table2 cellSpacing=1 cellPadding=1 width=731 bgColor=#ffffff 
      border=0>
        <TBODY>
        <TR>
          <TD width=143 bgColor=#ff6633 height=18>
            <P align=center><STRONG>Fixed Timeout</STRONG></P></TD>
          <TD width=143 bgColor=#ff6633 height=18>
            <P align=center><STRONG>ATO1</STRONG></P></TD>
          <TD width=143 bgColor=#ff6633 height=18>
            <P align=center><STRONG>ATO2</STRONG></P></TD>
          <TD width=143 bgColor=#ff6633>
            <DIV align=center><SPAN class=style1>ATO3</SPAN></DIV></TD>
          <TD width=143 bgColor=#ff6633>
            <DIV align=center><SPAN class=style1>Exponential 
          Average</SPAN></DIV></TD></TR>
        <TR>
          <TD bgColor=#ffcc33 height=57>
            <P>Timeout <INPUT size=1 name=timeout> </P></TD>
          <TD bgColor=#ffcc33>
            <P>Timeout&nbsp; <INPUT size=1 name=timeout1> </P>
            <P>Alpha <INPUT size=1 name=Alpha1> Beta<FONT color=#ffffff><INPUT 
            size=1 name=Beta1></P></FONT>
            <P>Roe&nbsp; <FONT color=#ffffff><INPUT size=1 name=Roe1></FONT> 
          </P></TD>
          <TD bgColor=#ffcc33>
            <P>Timeout <INPUT size=1 name=timeout2> </P>
            <P>Roe <FONT color=#ffffff><INPUT size=1 name=Roe2></FONT></P>
            <P>&nbsp;</P></TD>
          <TD bgColor=#ffcc33>
            <P>Timeout <INPUT size=1 name=timeout3> </P></TD>
          <TD bgColor=#ffcc33>
            <P>Timeout <INPUT size=1 name=timeout4> </P></TD></TR>
        <TR>
          <TD bgColor=#ffcc33>
            <P>Use Scheduling Algorithm:&nbsp;&nbsp;<BR><B><SELECT size=1 
            name=SeFunction> <OPTION id=sstf value="" 
              selected>S.S.T.F</OPTION> <OPTION value=clook>C-LOOK</OPTION> 
              <OPTION value="">FCFS</OPTION></SELECT> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD>
          <TD bgColor=#ffcc33>
            <P>Use Scheduling Algorithm:&nbsp;&nbsp;<BR><B><SELECT size=1 
            name=SeFunction1> <OPTION id=sstf value="" 
              selected>S.S.T.F</OPTION> <OPTION>C-LOOK</OPTION> <OPTION 
              value="">FCFS</OPTION></SELECT> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD>
          <TD bgColor=#ffcc33>
            <P>Use Scheduling Algorithm:&nbsp;&nbsp;<BR><B><SELECT size=1 
            name=SeFunction2> <OPTION id=sstf value="" 
              selected>S.S.T.F</OPTION> <OPTION>C-LOOK</OPTION> <OPTION 
              value="">FCFS</OPTION></SELECT> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD>
          <TD bgColor=#ffcc33>
            <P>Use Scheduling Algorithm:&nbsp;&nbsp;<BR><B><SELECT size=1 
            name=SeFunction3> <OPTION id=sstf value="" 
              selected>S.S.T.F</OPTION> <OPTION>C-LOOK</OPTION> <OPTION 
              value="">FCFS</OPTION></SELECT> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD>
          <TD bgColor=#ffcc33>
            <P>Use Scheduling Algorithm:&nbsp;&nbsp;<BR><B><SELECT size=1 
            name=SeFunction4> <OPTION id=sstf value="" 
              selected>S.S.T.F</OPTION> <OPTION>C-LOOK</OPTION> <OPTION 
              value="">FCFS</OPTION></SELECT> </B></P><!-- <INPUT id="Text18" type="text" size="10" name="Text15" readonly>
								--></TD></TR>
        <TR>
          <TD bgColor=#ffcc33>
            <P>Number of Shutdowns: (N<SUB>sd</SUB>) <BR><B>
            <INPUT readOnly 
            size=2 name=nshutfixed style="background-color: #FFCC33"></B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Number of Shutdowns: (N<SUB>sd</SUB>) <BR><B>
            <INPUT readOnly 
            size=2 name=nshutfixed1 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Number of Shutdowns: (N<SUB>sd</SUB>) <BR><B>
            <INPUT readOnly 
            size=2 name=nshutfixed2 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Number of Shutdowns: (N<SUB>sd</SUB>) <BR><B>
            <INPUT readOnly 
            size=2 name=nshutfixed3 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Number of Shutdowns: (N<SUB>sd</SUB>) <BR><B>
            <INPUT readOnly 
            size=2 name=nshutfixed4 style="background-color: #FFCC33"> </B></P></TD></TR>
        <TR>
          <TD bgColor=#ffcc33><FONT size=2>No. of wrong 
            Shutdowns:(N<SUB>wd</SUB>)</FONT> 
          <INPUT readOnly size=2 
            name=wshutfixed style="background-color: #FFCC33"></TD>
          <TD bgColor=#ffcc33><FONT size=2>No. of wrong 
            Shutdowns:(N<SUB>wd</SUB>)</FONT> 
          <INPUT readOnly size=2 
            name=wshutfixed1 style="background-color: #FFCC33"></TD>
          <TD bgColor=#ffcc33><FONT size=2>No. of wrong 
            Shutdowns:(N<SUB>wd</SUB>)</FONT> 
          <INPUT readOnly size=2 
            name=wshutfixed2 style="background-color: #FFCC33"></TD>
          <TD bgColor=#ffcc33><FONT size=2>No. of wrong 
            Shutdowns:(N<SUB>wd</SUB>)</FONT> 
          <INPUT readOnly size=2 
            name=wshutfixed3 style="background-color: #FFCC33"></TD>
          <TD bgColor=#ffcc33><FONT size=2>No. of wrong 
            Shutdowns:(N<SUB>wd</SUB>)</FONT> 
          <INPUT readOnly size=2 
            name=wshutfixed4 style="background-color: #FFCC33"></TD></TR>
        <TR>
          <TD bgColor=#ffcc33>
            <P>Average Time Before Shutdown: (T<SUB>bs</SUB>) <BR><B>
            <INPUT 
            readOnly size=2 name=ashutfixed style="background-color: #FFCC33"></B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Average Time Before Shutdown: (T<SUB>bs</SUB>) <BR><B>
            <INPUT 
            readOnly size=2 name=ashutfixed1 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Average Time Before Shutdown: (T<SUB>bs</SUB>) <BR><B>
            <INPUT 
            readOnly size=2 name=ashutfixed2 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Average Time Before Shutdown: (T<SUB>bs</SUB>) <BR><B>
            <INPUT 
            readOnly size=2 name=ashutfixed3 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P>Average Time Before Shutdown: (T<SUB>bs</SUB>) <BR><B>
            <INPUT 
            readOnly size=2 name=ashutfixed4 style="background-color: #FFCC33"> </B></P></TD></TR>
        <TR>
          <TD bgColor=#ffcc33 height=107>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">Power Consumed: </P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(watts)</P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(Pactive + 
            Pidle)<BR><B>
            <INPUT readOnly size=3 name=energyfixed style="background-color: #FFCC33"></B></P></TD>
          <TD bgColor=#ffcc33>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">Power Consumed: </P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(watts)</P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(Pactive + 
            Pidle)<BR><B>
            <INPUT readOnly size=3 name=energyfixed1 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">Power Consumed: </P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(watts)</P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(Pactive + 
            Pidle)<BR><B>
            <INPUT readOnly size=3 name=energyfixed2 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">Power Consumed: </P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(watts)</P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(Pactive + 
            Pidle)<BR><B>
            <INPUT readOnly size=3 name=energyfixed3 style="background-color: #FFCC33"> </B></P></TD>
          <TD bgColor=#ffcc33>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">Power Consumed: </P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(watts)</P>
            <P style="MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px">(Pactive + 
            Pidle)<BR><B>
            <INPUT readOnly size=3 name=energyfixed4 style="background-color: #FFCC33"> 
        </B></P></TD></TR></TBODY></TABLE>
      </FONT>
      <P class=style2><FONT color=#ffffff><B>Compare the performance 
      of&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      </B></FONT><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      <FONT color=#ffffff>Algorithm 
      1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      Algorithm 
      2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      All</FONT></B></P>
      <P 
      class=style2><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      <SELECT size=1 name=D1> <OPTION selected>Fixed Timeout</OPTION> 
        <OPTION>ATO1</OPTION> <OPTION>ATO2</OPTION> <OPTION>ATO3</OPTION> 
        <OPTION>Exponential Average</OPTION></SELECT>&nbsp;&nbsp;&nbsp;&nbsp; 
      <SELECT size=1 name=D2> <OPTION>Fixed Timeout</OPTION> <OPTION 
        selected>ATO1</OPTION> <OPTION>ATO2</OPTION> <OPTION>ATO3</OPTION> 
        <OPTION>Exponential 
      Average</OPTION></SELECT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      <SELECT size=1 name=D3> <OPTION>yes</OPTION> <OPTION 
      selected>no</OPTION></SELECT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
      </B></P>
      <P style="margin-top: 0; margin-bottom: 0">&nbsp;</P>
      <P style="margin-top: 0; margin-bottom: 0"><B><FONT color=#ffffff size="2">
      Performance Metric 1 :</FONT></B></P>
      <P style="margin-top: 0; margin-bottom: 0"><B><FONT color=#ffffff size="2">
      Enter window size in which maximum wait time is to be computed&nbsp; :&nbsp;&nbsp; </FONT><FONT color=#ffffff><INPUT size=2 
      name=tlongw></FONT></B></P>
      <P style="margin-top: 0; margin-bottom: 0">&nbsp;</P>
      <P style="margin-top: 0; margin-bottom: 0"><B><font size="2" color="#ffffff">
      Performance Metric 2 :</font></B></P>
      <P style="margin-top: 0; margin-bottom: 0"><B><font size="2" color="#ffffff">
      Enter value between two adjacent wait cycles to compute Maximum Sequence 
      Length:</font><font size="2"> </font> <FONT 
      color=#ffffff><INPUT size=2 name=tshortw></FONT></B></P>
      <P>&nbsp;<INPUT onclick=perm() type=button value="Performance Metrics" name=B1></P>
      <P>&nbsp;&nbsp;&nbsp; </P></TD></TR>
  <TR vAlign=top>
    <TD>&nbsp;</TD></TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width="100%" align=center border=0>
  <TBODY>
  <TR>
    <TD bgColor=#cccccc height=118>
      <DIV align=center>
      <P><FONT color=#000000 size=1><BR></FONT></P>
      <HR align=center noShade SIZE=1>
      &nbsp;</DIV></TD></TR></TBODY></TABLE></FORM></BODY></HTML>