<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0058)http://www-unix.oit.umass.edu/~sladiwal/compArch/help.htm -->
<!-- saved from url=(0022)http://internet.e-mail --><HTML><HEAD><TITLE>Disk Scheduling Algorithms</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
href="basic.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript>

<!--Begin Netscape Resize Script -->
<!--
function MM_reloadPage(init) {  //reloads the window if Nav4 resized
  if (init==true) with (navigator) {if ((appName=="Netscape")&&(parseInt(appVersion)==4)) {
    document.MM_pgW=innerWidth; document.MM_pgH=innerHeight; onresize=MM_reloadPage; }}
  else if (innerWidth!=document.MM_pgW || innerHeight!=document.MM_pgH) location.reload();
}
MM_reloadPage(true);
// -->
<!--End Netscape Resize Script -->


			</SCRIPT>

<SCRIPT language=javascript id=clientEventHandlersJS>
<!--

//-->
			</SCRIPT>

<META content="Microsoft FrontPage 5.0" name=GENERATOR></HEAD>
<BODY leftMargin=0 background=Home_tile.gif topMargin=0 
marginheight="0" marginwidth="0"><NOSCRIPT>
This page requires <A 
href="../../../../../browsers.netscape.com/browsers/main.tmpl">Netscape 4.0</A>, <A 
href="../../../../../www.microsoft.com/windows/ie/default.asp">Internet Explorer 4.0</A> 
or newer with JavaScript enabled.</NOSCRIPT> 
<FORM id=MyForm name=MyForm method=get>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD colSpan=2><A 
      href="help.htm"><IMG 
      height=68 alt="Computer Architecture Final Project" 
      src="GlobalNav_Logo.jpg" width=454 border=0></A></TD></TR>
  <TR>
    <TD width=19><IMG height=8 src="" width=19></TD>
    <TD>
      <DIV align=left>
      <TABLE cellSpacing=0 cellPadding=0 width=463 border=0>
        <TBODY>
         <TR>
          <TD width=260><FONT color=#000000><B>&nbsp;&nbsp; <A 
            href="demo.htm">SIMULATION 
            </A></B></FONT></TD>
          <TD width=182><FONT color=#000000><B><A href="help.htm">HELP 
            FILE </a></B></FONT></TD>
          <TD 
width=21>&nbsp;</TD></TR></TBODY></TABLE></DIV></TD></TR></TBODY></TABLE><BR>
<TABLE cellSpacing=0 cellPadding=0 width="97%" align=center border=0>
  <TBODY>
  <TR>
    <TD vAlign=top colSpan=3><IMG height=18 src="" width=9 
  border=0></TD></TR></TBODY></TABLE><BR>
<TABLE cellSpacing=0 cellPadding=0 width="97%" align=center border=0>
  <TBODY>
  <TR vAlign=top>
    <TD>
      <H4>DISK POWER MANAGEMENT SIMULATOR</H4>
      <UL><STRONG><FONT size=2><FONT face=verdana color=#ffffff>Dynamic power 
        management saves power by shutting down idle devices. The tool presented 
        here compares a set of DPM algorithms for controlling power states of 
        hard disk drives. </FONT></FONT></STRONG>
        <P><STRONG><FONT size=2><FONT face=verdana color=#ffffff>The algorithms 
        have been described in </FONT><a href="paper.pdf"><FONT face=verdana 
        color=#ffff99>"Quantitative Comparison of Power Management 
        Algorithms"</FONT></a><FONT face=verdana color=#ffffff> by Yung-Hsiang Lu et 
        al. The paper appeared in Proceedings of the conference on Design, 
        automation and test in Europe. The user is encouraged to read&nbsp; the 
        paper before using the tool. </FONT></FONT></STRONG></P>
        <P><STRONG><FONT color=#ffffff size=2><FONT face=verdana>The tool has 
        three fold uses. First it can be used to learn a set of scheduling 
        algorithms used by hard disks to schedule track accesses. The first part 
        of tool demonstrate the order in which tracks would be accessed for 
        three different Disk Scheduling algorithms: FCFS (First Come, First 
        Served), S.S.T.F (Shortest Seek Time First), and 
        C-Look</FONT></FONT><FONT face=verdana color=#ffffff size=2>. A brief 
        description of these algorithms is presented <a href="#sched">here</a>. 
        For these set of experiments, no power management algorithms are used. 
        The second part of tool demonstrates the working of DPM algorithms. The 
        algorithms presented are Fixed Timeout, ATO1, ATO2, ATO3 and Exponential 
        Average. Different scheduling algorithms can be used while performing 
        simulations for each of these. For example the user can see how power 
        management algorithm ATO1 performs if disk scheduling algorithm used is 
        S.S.T.F or if another disk scheduling algorithm, SCAN is used. Finally, 
        a performance comparison of any two DPM algorithms can be 
        seen.</FONT></STRONG></P>
        <P><STRONG><FONT face=verdana color=#ffffff size=2>Following are the 
        steps to use this software</FONT><FONT size=2> 
        <BR></FONT></STRONG>&nbsp; </P>
        <LI><STRONG>Step 1</STRONG>: &nbsp;<STRONG> Select disk 
        parameters<BR></STRONG>Disk paraneters such as Power consumed when disk 
        is active are used for Energy calculations and determining performance 
        parameters like minimum sleep time required for disk to conserve 
        energy.<BR>Disk parameters can be selected in two ways: <BR>* By 
        selecting a disk model: When a disk modl is selected the 
        table&nbsp;reflects all parameters for that disk model.<BR>* By 
        inputting a new set of values. When the option "User Defined" is 
        selcted, the values entered in&nbsp;parameter table will be used for all 
        simulations.&nbsp;&nbsp;&nbsp;<BR>
        <LI><STRONG>Step 2:</STRONG> <STRONG>Enter Head starting Track Number 
        </STRONG><BR>The starting position of head can be specified. Any 
        scheduling algorithm will start scheduling assuming this start 
value.<BR>
        <LI><B>Step 3: Enter Disk Access Track Numbers</B>&nbsp;<STRONG> 
        (0-600)</STRONG> <BR>A set of track numbers that need to be accessed 
        should be specified. Track accesses requests are assumed to be buffered 
        in a buffer of size of four.<BR>
        <LI><STRONG>Step 4 : Enter time intervals between accesses 
        </STRONG><BR>Between any two set of track accesses, a time interval can 
        be specified where the disk is idle.</LI></UL>
      <P><STRONG><FONT color=#ffffff size=2><FONT face=verdana>&nbsp;Instead of 
      entering values as specified in Step 1-4, experiment can also be performed 
      clicking "Autofill" button, to fetch default values. 
      <BR></FONT></FONT></STRONG></P>
      <UL>
        <LI><STRONG>Step 5: Start the execution</STRONG> <BR>The execution can 
        be started by clicking the "Go" button. This would simulate track 
        accesses for all scheduling algortihms and compute the energy 
        requirements of each.<BR>
        <LI><STRONG>Step 6 : Choose Power Management&nbsp;algorithm </STRONG>The 
        second stage of simulator reflects the effect of Power management 
        algortihms.&nbsp;The algortihm can be chosen from the select box. A 
        choice of fixed timeout, Adaptive timeout 1, and Adaptive timeout 2 and 
        Fixed timeout are provided.<BR>
        <LI><STRONG>Step 7: Enter parameters for Fixed Timeout</STRONG> 
        Different timeout values<STRONG> </STRONG>can be specified to see the 
        effect on Fixed timeout algorithm. The algorithm will wait for time 
        specified in timeout interval before scheduling disk spin-down. Also, a 
        choice of disk scheduling algorithms is provided for scheduling track 
        accesses and hence the active time.<BR>
        <LI><STRONG>Step 8: Enter parameters for ATO1:</STRONG> Different values 
        of alpha, beta and roe can be specified for varying timeout adaptively. 
        ATO1 adapts its timeout values based on an acceptable or unacceptable 
        disk shut down. In case of acceptable spin down, timeout is decreased 
        with a factor or&nbsp;beta and in case of an unacceptable spin down, 
        timeout value is increased by alpha.&nbsp;<BR>
        <LI><STRONG>Step 8: Enter parameters for ATO2: </STRONG>ATO2 adjust 
        timeout asymmetrically, increasing by 1 sec and decreasing by half. 
        Values of roe can be specified to estimate acceptable and unacceptable 
        spin-downs.<BR>
        <LI><STRONG>Step 8: Enter parameters for ATO3:</STRONG>ATO3 adjusts 
        timeout by looking at the busy time period before every idle period. If 
        busy period&nbsp; is small, timeout decreases, if busy period in large, 
        timeout increases. Initial timeout value can be entered by user.<BR>
        <LI><STRONG>Step 9: Enter parameters for Exponential 
        Average:</STRONG>Exponential Average uses predicted and actual lengths 
        of previous idle preiod to predict the lenths of current idle period<BR>
        <LI><STRONG>View results</STRONG> : For each power management algorithm 
        simulated, set of performance parameters can be viewd such as, Number of 
        shutdowns, Number of wrong shutdowns <BR>
        <LI><STRONG>Step 10: Performance Metrics: </STRONG>Any two set or all 
        Power Management algorithms can be compared for their performance using 
        graphs by clicking "Performance Metrics". Algorithms can be compared in 
        terms of "Energy Gained", "Total Weight Delay", "Average Weight Delay", 
        "Maximum weight sequence" for long and short time windows ( Window sizes 
        can be specified by user).<BR>Additionaly, a graph plots for each 
        compared algorithm,the longest shutdown sequence in which the time 
        between two adjacent shutdowns is shorter than a threshold.<BR></LI></UL>
      <P><FONT color=#ffffff><STRONG>To start using simulation click on 
      "Simulation" tab above</STRONG></FONT></P>
      <P></P>
      <P>&nbsp;</P>
      <TABLE cellSpacing=0 cellPadding=0 width="97%" align=center border=0>
        <TBODY>
        <TR vAlign=top>
          <TD>
            <H4><A name=sched></A>DISK SCHEDULING ALGORITHMS </H4>
            <P><FONT color=#ffffff size=2>A hard disk drive is a collection of 
            plates called platters. The surface of each platter is divided into 
            circular&nbsp; tracks. Further more, each track is divided into 
            smaller pieces called sectors. Disk I/O is done sector by sector. A 
            group of tracks that are positioned on top of each other form a 
            cylinder. There is a head connected to an arm for each surface, 
            which handles all I/O operations. </FONT></P>
            <P><FONT color=#ffffff size=2>For each I/O request, first&nbsp; head 
            is selected. It is then moved over the destination track. The disk 
            is then rotated to position the desired sector under the head= and 
            finally, the read/write operation is performed. </FONT></P>
            <P><FONT color=#ffffff size=2>There are two objectives for any disk 
            scheduling algorithm:<BR>1. Maximize the throughput - the average 
            number of requests satisfied per time unit.<BR>2. Minimize the 
            response time - the average time that a request must wait before it 
            is satisfied.</FONT></P>
            <P><FONT color=#ffffff size=2>Some of the disk scheduling algorithms 
            are explained below.</FONT></P>
            <OL>
              <LI><B>FCFS</B> (First Come, First Served) 
              <UL>
                <LI>perform operations in order requested 
                <LI>no reordering of work queue 
                <LI>no <B>starvation</B>: every request is serviced 
                <LI>poor performance </LI></UL>
              <P></P>
              <LI><B>SSTF</B> (Shortest Seek Time First) 
              <UL>
                <LI>after a request, go to the closest request in the work 
                queue, regardless of direction 
                <LI>reduces total seek time compared to FCFS 
                <LI>Disadvantages 
                <UL>
                  <LI><B>starvation</B> is possible; stay in one area of the 
                  disk if very busy 
                  <LI>switching directions slows things down </LI></UL></LI></UL>
              <P></P>
              <LI><B>SCAN</B> 
              <UL>
                <LI>go from the outside to the inside servicing requests and 
                then back from the outside to the inside servicing requests. 
                <LI>repeats this over and over. 
                <LI>reduces variance compared to SSTF. </LI></UL>
              <P></P>
              <LI><B>LOOK</B> 
              <UL>
                <LI>like SCAN but stops moving inwards (or outwards) when no 
                more requests in that direction exist. </LI></UL>
              <P></P>
              <LI><B>C-SCAN</B> (circular scan) 
              <UL>
                <LI>moves inwards servicing requests until it reaches the 
                innermost cylinder; then jumps to the outside cylinder of the 
                disk without servicing any requests. 
                <LI>repeats this over and over. 
                <LI>variant: service requests from inside to outside, and then 
                skip back to the innermost cylinder. </LI></UL>
              <P></P>
              <LI><B>C-LOOK</B> 
              <UL>
                <LI>moves inwards servicing requests until there are no more 
                requests in that direction, then it jumps to the outermost 
                outstanding requests. 
                <LI>repeast this over and over. 
                <LI>variant: service requests from inside to outside, then skip 
                back to the innermost request. 
      </LI></UL></LI></OL></TD></TR></TBODY></TABLE>
      <P>&nbsp;&nbsp;&nbsp; </P></TD></TR></TBODY></TABLE>
<TABLE cellSpacing=0 cellPadding=0 width="100%" align=center border=0>
  <TBODY>
  <TR>
    <TD bgColor=#cccccc height=118>
      <P>&nbsp;</P>
      <DIV align=center>
      <P><FONT color=#000000 size=1><BR><FONT 
      color=#000000><BR><BR></FONT></FONT></P>
      <HR align=center noShade SIZE=1>
      &nbsp;</DIV></TD></TR></TBODY></TABLE></FORM></BODY></HTML>
